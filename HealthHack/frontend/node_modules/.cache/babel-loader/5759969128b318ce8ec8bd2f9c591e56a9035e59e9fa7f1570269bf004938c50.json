{"ast":null,"code":"var _jsxFileName = \"/Users/matthewkalender/Desktop/HealthHack/ekg-simulator/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport Chart from \"chart.js/auto\";\nimport \"./App.css\"; // Ensure this file is created for styles\n\n// Arrhythmias data structure\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst arrhythmias = {\n  \"Sinus Tachycardia\": {\n    heartRate: 100,\n    Pwave: true,\n    RtR: true,\n    // Regular R-R intervals\n    Placement: false,\n    // P wave before QRS complex\n    description: \"Regular rhythm with a P wave preceding every QRS complex.\"\n  },\n  \"Afib with RVR\": {\n    heartRate: 150,\n    Pwave: false,\n    Placement: false,\n    description: \"Lacks distinct P waves, has variable R-R intervals.\"\n  },\n  \"AVRT\": {\n    heartRate: 220,\n    Pwave: true,\n    Placement: true,\n    Ppositive: false,\n    // P wave is upside down\n    description: \"Very fast rate (200-300 bpm), with retrograde P waves.\"\n  },\n  \"AVNRT\": {\n    heartRate: 180,\n    Pwave: false,\n    RtR: false,\n    // Irregular R-R intervals\n    description: \"Fast rate, with retrograde P waves possibly overlaying the QRS.\"\n  }\n};\n\n// Merged function to generate EKG waveform and signal\nfunction generateEKG(duration = 5, arrhythmiaType, samplingRate = 1000, numWaves = 1) {\n  const numSamples = duration * samplingRate; // Total number of samples to generate\n  const t = Array.from({\n    length: numSamples\n  }, (_, i) => i / samplingRate); // Time array\n  let ekgSignal = Array(t.length).fill(0); // Initialize the EKG signal array\n  const heartRate = arrhythmias[arrhythmiaType].heartRate; // Get heart rate for the chosen arrhythmia\n  const beatDuration = 60 / heartRate; // Calculate the duration of one heartbeat\n\n  // Gaussian wave generator\n  function gaussianWave(x, mean, amplitude, width) {\n    return amplitude * Math.exp(-((x - mean) ** 2) / (2 * width ** 2));\n  }\n\n  // EKG waveform generation\n  const wavePositions = []; // To hold positions for P, Q, R, S, T waves\n  for (let i = 0; i < numWaves; i++) {\n    let start = Math.floor(i * (60 / heartRate) * samplingRate);\n    let end = start + Math.floor(60 / heartRate * samplingRate);\n    let ekgBeat = Array(t.length).fill(0); // Initialize the EKG beat array\n\n    // Define wave positions\n    const pWaveStart = arrhythmias[arrhythmiaType].Pwave ? 0.2 * beatDuration : null; // P wave presence\n    const qWaveStart = 0.4 * beatDuration; // Q wave position\n    const rWaveStart = 0.45 * beatDuration; // R wave position\n    const sWaveStart = 0.5 * beatDuration; // S wave position\n    const tWaveStart = 0.7 * beatDuration; // T wave position\n\n    // Store the positions for highlighting\n    if (pWaveStart !== null) wavePositions.push({\n      type: 'P',\n      start: start + Math.floor(pWaveStart * samplingRate),\n      end: start + Math.floor((pWaveStart + 0.1 * beatDuration) * samplingRate)\n    });\n    wavePositions.push({\n      type: 'Q',\n      start: start + Math.floor(qWaveStart * samplingRate),\n      end: start + Math.floor((qWaveStart + 0.1 * beatDuration) * samplingRate)\n    });\n    wavePositions.push({\n      type: 'R',\n      start: start + Math.floor(rWaveStart * samplingRate),\n      end: start + Math.floor((rWaveStart + 0.1 * beatDuration) * samplingRate)\n    });\n    wavePositions.push({\n      type: 'S',\n      start: start + Math.floor(sWaveStart * samplingRate),\n      end: start + Math.floor((sWaveStart + 0.1 * beatDuration) * samplingRate)\n    });\n    wavePositions.push({\n      type: 'T',\n      start: start + Math.floor(tWaveStart * samplingRate),\n      end: start + Math.floor((tWaveStart + 0.2 * beatDuration) * samplingRate)\n    });\n\n    // Adjust for placement of P wave\n    const pWavePlacement = arrhythmias[arrhythmiaType].Placement;\n\n    // Add P wave based on its presence and placement\n    if (pWaveStart !== null) {\n      if (pWavePlacement) {\n        ekgBeat = ekgBeat.map((y, i) => y + gaussianWave(t[i], rWaveStart + 0.1 * beatDuration, 0.1, 0.05 * beatDuration));\n      } else {\n        ekgBeat = ekgBeat.map((y, i) => y + gaussianWave(t[i], pWaveStart, 0.1, 0.05 * beatDuration));\n      }\n    }\n\n    // Add QRS complex and T wave\n    ekgBeat = ekgBeat.map((y, i) => y - gaussianWave(t[i], qWaveStart, 0.15, 0.02 * beatDuration) +\n    // Q wave\n    gaussianWave(t[i], rWaveStart, 1.0, 0.01 * beatDuration) -\n    // R wave\n    gaussianWave(t[i], sWaveStart, 0.2, 0.02 * beatDuration) +\n    // S wave\n    gaussianWave(t[i], tWaveStart, 0.3, 0.1 * beatDuration) // T wave\n    );\n\n    // Adjust for inverted P wave in AVRT\n    if (arrhythmias[arrhythmiaType].Ppositive === false && arrhythmias[arrhythmiaType].Pwave) {\n      ekgBeat = ekgBeat.map((y, i) => y - gaussianWave(t[i], pWaveStart, 0.1, 0.05 * beatDuration) // Inverted P wave\n      );\n    }\n\n    // Add the EKG beat to the overall signal\n    for (let j = start; j < end && j < ekgSignal.length; j++) {\n      ekgSignal[j] += ekgBeat[j - start] + 0.05 * (Math.random() - 0.5); // Add noise\n    }\n  }\n\n  // Trim the time and ekgSignal arrays to contain only the relevant data\n  const trimmedEnd = Math.ceil(numWaves * (60 / heartRate) * samplingRate);\n  return {\n    t: t.slice(0, trimmedEnd),\n    ekgSignal: ekgSignal.slice(0, trimmedEnd),\n    wavePositions\n  };\n}\nfunction EKGSimulator() {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  const [userDiagnosis, setUserDiagnosis] = useState(\"\");\n  const [chosenEKGType, setChosenEKGType] = useState(\"\");\n  const [numPulses, setNumPulses] = useState(3); // Default to 3 pulses\n  const [wavePositions, setWavePositions] = useState([]);\n  const handleDiagnosisChange = event => {\n    setUserDiagnosis(event.target.value);\n  };\n  const handleNumPulsesChange = event => {\n    const value = parseInt(event.target.value);\n    if (value === 3 || value === 5) {\n      setNumPulses(value);\n    }\n  };\n  const checkDiagnosis = () => {\n    if (userDiagnosis.toLowerCase() === chosenEKGType.toLowerCase()) {\n      alert(\"Correct! Well done!\");\n    } else {\n      alert(`Incorrect. The correct answer was '${chosenEKGType}'.`);\n    }\n    // Show explanation\n    alert(arrhythmias[chosenEKGType].description);\n  };\n  const simulateRandomEKG = () => {\n    const arrhythmiaTypes = Object.keys(arrhythmias);\n    const randomType = arrhythmiaTypes[Math.floor(Math.random() * arrhythmiaTypes.length)];\n    setChosenEKGType(randomType);\n    const {\n      heartRate\n    } = arrhythmias[randomType];\n    const {\n      t,\n      ekgSignal,\n      wavePositions\n    } = generateEKG(5, randomType, 1000, numPulses); // Generate based on arrhythmia type\n    setWavePositions(wavePositions); // Save wave positions for background highlighting\n\n    const data = {\n      labels: t,\n      datasets: [{\n        label: `EKG Signal - ${randomType}`,\n        data: ekgSignal,\n        borderColor: \"black\",\n        // Change the line color to black\n        pointRadius: 0,\n        // Remove bullet points\n        showLine: true,\n        // Ensure line is shown\n        fill: false\n      }]\n    };\n    setChartData(data);\n  };\n  useEffect(() => {\n    simulateRandomEKG();\n  }, [numPulses]); // Re-run simulation when numPulses changes\n\n  // Chart options for highlighting wave areas\n  const chartOptions = {\n    scales: {\n      y: {\n        beginAtZero: true\n      },\n      x: {\n        ticks: {\n          callback: value => value.toFixed(2) // Show decimal values for time\n        }\n      }\n    },\n    plugins: {\n      annotation: {\n        annotations: {}\n      }\n    }\n  };\n\n  // Add background highlights for P, QRS, and T waves\n  if (chartData) {\n    wavePositions.forEach(({\n      type,\n      start,\n      end\n    }) => {\n      const color = type === 'P' ? 'rgba(255, 223, 186, 0.5)' : type === 'T' ? 'rgba(186, 255, 233, 0.5)' : 'rgba(255, 186, 186, 0.5)';\n      chartOptions.plugins.annotation.annotations[`highlight${type}`] = {\n        type: 'box',\n        xMin: start / 1000,\n        // Convert to seconds\n        xMax: end / 1000,\n        // Convert to seconds\n        yMin: -1,\n        // Adjust these values based on the EKG scale\n        yMax: 1,\n        backgroundColor: color,\n        borderWidth: 0\n      };\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"EKG Simulator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"input-field\",\n        value: userDiagnosis,\n        onChange: handleDiagnosisChange,\n        placeholder: \"Enter your diagnosis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button\",\n        onClick: checkDiagnosis,\n        children: \"Check Diagnosis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        className: \"input-field\",\n        value: numPulses,\n        onChange: handleNumPulsesChange,\n        placeholder: \"Number of Pulses (3 or 5)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button\",\n        onClick: simulateRandomEKG,\n        children: \"Generate New EKG\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: chartData && /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData,\n        options: chartOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 31\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 9\n  }, this);\n}\n_s(EKGSimulator, \"0GzMJJEvILwZxYog/p/WClOaxnY=\");\n_c = EKGSimulator;\nexport default EKGSimulator;\nvar _c;\n$RefreshReg$(_c, \"EKGSimulator\");","map":{"version":3,"names":["React","useState","useEffect","Line","Chart","jsxDEV","_jsxDEV","arrhythmias","heartRate","Pwave","RtR","Placement","description","Ppositive","generateEKG","duration","arrhythmiaType","samplingRate","numWaves","numSamples","t","Array","from","length","_","i","ekgSignal","fill","beatDuration","gaussianWave","x","mean","amplitude","width","Math","exp","wavePositions","start","floor","end","ekgBeat","pWaveStart","qWaveStart","rWaveStart","sWaveStart","tWaveStart","push","type","pWavePlacement","map","y","j","random","trimmedEnd","ceil","slice","EKGSimulator","_s","chartData","setChartData","userDiagnosis","setUserDiagnosis","chosenEKGType","setChosenEKGType","numPulses","setNumPulses","setWavePositions","handleDiagnosisChange","event","target","value","handleNumPulsesChange","parseInt","checkDiagnosis","toLowerCase","alert","simulateRandomEKG","arrhythmiaTypes","Object","keys","randomType","data","labels","datasets","label","borderColor","pointRadius","showLine","chartOptions","scales","beginAtZero","ticks","callback","toFixed","plugins","annotation","annotations","forEach","color","xMin","xMax","yMin","yMax","backgroundColor","borderWidth","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","placeholder","onClick","options","_c","$RefreshReg$"],"sources":["/Users/matthewkalender/Desktop/HealthHack/ekg-simulator/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport Chart from \"chart.js/auto\";\nimport \"./App.css\"; // Ensure this file is created for styles\n\n// Arrhythmias data structure\nconst arrhythmias = {\n    \"Sinus Tachycardia\": { \n        heartRate: 100,\n        Pwave: true,\n        RtR: true, // Regular R-R intervals\n        Placement: false, // P wave before QRS complex\n        description: \"Regular rhythm with a P wave preceding every QRS complex.\" \n    },\n    \"Afib with RVR\": { \n        heartRate: 150,\n        Pwave: false,\n        Placement: false, \n        description: \"Lacks distinct P waves, has variable R-R intervals.\" \n    },\n    \"AVRT\": { \n        heartRate: 220,\n        Pwave: true,\n        Placement: true,\n        Ppositive: false, // P wave is upside down\n        description: \"Very fast rate (200-300 bpm), with retrograde P waves.\" \n    },\n    \"AVNRT\": { \n        heartRate: 180,\n        Pwave: false,\n        RtR: false, // Irregular R-R intervals\n        description: \"Fast rate, with retrograde P waves possibly overlaying the QRS.\" \n    }\n};\n\n// Merged function to generate EKG waveform and signal\nfunction generateEKG(duration = 5, arrhythmiaType, samplingRate = 1000, numWaves = 1) {\n    const numSamples = duration * samplingRate; // Total number of samples to generate\n    const t = Array.from({ length: numSamples }, (_, i) => i / samplingRate); // Time array\n    let ekgSignal = Array(t.length).fill(0); // Initialize the EKG signal array\n    const heartRate = arrhythmias[arrhythmiaType].heartRate; // Get heart rate for the chosen arrhythmia\n    const beatDuration = 60 / heartRate; // Calculate the duration of one heartbeat\n\n    // Gaussian wave generator\n    function gaussianWave(x, mean, amplitude, width) {\n        return amplitude * Math.exp(-((x - mean) ** 2) / (2 * width ** 2));\n    }\n\n    // EKG waveform generation\n    const wavePositions = []; // To hold positions for P, Q, R, S, T waves\n    for (let i = 0; i < numWaves; i++) {\n        let start = Math.floor(i * (60 / heartRate) * samplingRate);\n        let end = start + Math.floor((60 / heartRate) * samplingRate);\n        let ekgBeat = Array(t.length).fill(0); // Initialize the EKG beat array\n\n        // Define wave positions\n        const pWaveStart = arrhythmias[arrhythmiaType].Pwave ? 0.2 * beatDuration : null; // P wave presence\n        const qWaveStart = 0.4 * beatDuration; // Q wave position\n        const rWaveStart = 0.45 * beatDuration; // R wave position\n        const sWaveStart = 0.5 * beatDuration; // S wave position\n        const tWaveStart = 0.7 * beatDuration; // T wave position\n\n        // Store the positions for highlighting\n        if (pWaveStart !== null) wavePositions.push({ type: 'P', start: start + Math.floor(pWaveStart * samplingRate), end: start + Math.floor((pWaveStart + 0.1 * beatDuration) * samplingRate) });\n        wavePositions.push({ type: 'Q', start: start + Math.floor(qWaveStart * samplingRate), end: start + Math.floor((qWaveStart + 0.1 * beatDuration) * samplingRate) });\n        wavePositions.push({ type: 'R', start: start + Math.floor(rWaveStart * samplingRate), end: start + Math.floor((rWaveStart + 0.1 * beatDuration) * samplingRate) });\n        wavePositions.push({ type: 'S', start: start + Math.floor(sWaveStart * samplingRate), end: start + Math.floor((sWaveStart + 0.1 * beatDuration) * samplingRate) });\n        wavePositions.push({ type: 'T', start: start + Math.floor(tWaveStart * samplingRate), end: start + Math.floor((tWaveStart + 0.2 * beatDuration) * samplingRate) });\n\n        // Adjust for placement of P wave\n        const pWavePlacement = arrhythmias[arrhythmiaType].Placement;\n\n        // Add P wave based on its presence and placement\n        if (pWaveStart !== null) {\n            if (pWavePlacement) {\n                ekgBeat = ekgBeat.map((y, i) => \n                    y + gaussianWave(t[i], rWaveStart + 0.1 * beatDuration, 0.1, 0.05 * beatDuration)\n                );\n            } else {\n                ekgBeat = ekgBeat.map((y, i) => \n                    y + gaussianWave(t[i], pWaveStart, 0.1, 0.05 * beatDuration)\n                );\n            }\n        }\n\n        // Add QRS complex and T wave\n        ekgBeat = ekgBeat.map((y, i) => \n            y -\n            gaussianWave(t[i], qWaveStart, 0.15, 0.02 * beatDuration) + // Q wave\n            gaussianWave(t[i], rWaveStart, 1.0, 0.01 * beatDuration) - // R wave\n            gaussianWave(t[i], sWaveStart, 0.2, 0.02 * beatDuration) + // S wave\n            gaussianWave(t[i], tWaveStart, 0.3, 0.1 * beatDuration) // T wave\n        );\n\n        // Adjust for inverted P wave in AVRT\n        if (arrhythmias[arrhythmiaType].Ppositive === false && arrhythmias[arrhythmiaType].Pwave) {\n            ekgBeat = ekgBeat.map((y, i) => \n                y - gaussianWave(t[i], pWaveStart, 0.1, 0.05 * beatDuration) // Inverted P wave\n            );\n        }\n\n        // Add the EKG beat to the overall signal\n        for (let j = start; j < end && j < ekgSignal.length; j++) {\n            ekgSignal[j] += ekgBeat[j - start] + 0.05 * (Math.random() - 0.5); // Add noise\n        }\n    }\n\n    // Trim the time and ekgSignal arrays to contain only the relevant data\n    const trimmedEnd = Math.ceil(numWaves * (60 / heartRate) * samplingRate);\n    return { t: t.slice(0, trimmedEnd), ekgSignal: ekgSignal.slice(0, trimmedEnd), wavePositions };\n}\n\nfunction EKGSimulator() {\n    const [chartData, setChartData] = useState(null);\n    const [userDiagnosis, setUserDiagnosis] = useState(\"\");\n    const [chosenEKGType, setChosenEKGType] = useState(\"\");\n    const [numPulses, setNumPulses] = useState(3); // Default to 3 pulses\n    const [wavePositions, setWavePositions] = useState([]);\n\n    const handleDiagnosisChange = (event) => {\n        setUserDiagnosis(event.target.value);\n    };\n\n    const handleNumPulsesChange = (event) => {\n        const value = parseInt(event.target.value);\n        if (value === 3 || value === 5) {\n            setNumPulses(value);\n        }\n    };\n\n    const checkDiagnosis = () => {\n        if (userDiagnosis.toLowerCase() === chosenEKGType.toLowerCase()) {\n            alert(\"Correct! Well done!\");\n        } else {\n            alert(`Incorrect. The correct answer was '${chosenEKGType}'.`);\n        }\n        // Show explanation\n        alert(arrhythmias[chosenEKGType].description);\n    };\n\n    const simulateRandomEKG = () => {\n        const arrhythmiaTypes = Object.keys(arrhythmias);\n        const randomType = arrhythmiaTypes[Math.floor(Math.random() * arrhythmiaTypes.length)];\n        setChosenEKGType(randomType);\n\n        const { heartRate } = arrhythmias[randomType];\n        const { t, ekgSignal, wavePositions } = generateEKG(5, randomType, 1000, numPulses); // Generate based on arrhythmia type\n        setWavePositions(wavePositions); // Save wave positions for background highlighting\n\n        const data = {\n            labels: t,\n            datasets: [{\n                label: `EKG Signal - ${randomType}`,\n                data: ekgSignal,\n                borderColor: \"black\", // Change the line color to black\n                pointRadius: 0, // Remove bullet points\n                showLine: true,  // Ensure line is shown\n                fill: false\n            }],\n        };\n\n        setChartData(data);\n    };\n\n    useEffect(() => {\n        simulateRandomEKG();\n    }, [numPulses]); // Re-run simulation when numPulses changes\n\n    // Chart options for highlighting wave areas\n    const chartOptions = {\n        scales: {\n            y: {\n                beginAtZero: true,\n            },\n            x: {\n                ticks: {\n                    callback: (value) => value.toFixed(2), // Show decimal values for time\n                },\n            },\n        },\n        plugins: {\n            annotation: {\n                annotations: {},\n            },\n        },\n    };\n\n    // Add background highlights for P, QRS, and T waves\n    if (chartData) {\n        wavePositions.forEach(({ type, start, end }) => {\n            const color = type === 'P' ? 'rgba(255, 223, 186, 0.5)' : type === 'T' ? 'rgba(186, 255, 233, 0.5)' : 'rgba(255, 186, 186, 0.5)';\n            chartOptions.plugins.annotation.annotations[`highlight${type}`] = {\n                type: 'box',\n                xMin: start / 1000, // Convert to seconds\n                xMax: end / 1000, // Convert to seconds\n                yMin: -1, // Adjust these values based on the EKG scale\n                yMax: 1,\n                backgroundColor: color,\n                borderWidth: 0,\n            };\n        });\n    }\n\n    return (\n        <div className=\"App\">\n            <h1>EKG Simulator</h1>\n            <div className=\"input-section\">\n                <input\n                    type=\"text\"\n                    className=\"input-field\"\n                    value={userDiagnosis}\n                    onChange={handleDiagnosisChange}\n                    placeholder=\"Enter your diagnosis\"\n                />\n                <button className=\"button\" onClick={checkDiagnosis}>Check Diagnosis</button>\n            </div>\n            <div className=\"input-section\">\n                <input\n                    type=\"number\"\n                    className=\"input-field\"\n                    value={numPulses}\n                    onChange={handleNumPulsesChange}\n                    placeholder=\"Number of Pulses (3 or 5)\"\n                />\n                <button className=\"button\" onClick={simulateRandomEKG}>Generate New EKG</button>\n            </div>\n            <div className=\"chart-container\">\n                {chartData && <Line data={chartData} options={chartOptions} />}\n            </div>\n        </div>\n    );\n}\n\nexport default EKGSimulator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}