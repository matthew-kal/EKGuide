{"ast":null,"code":"var _jsxFileName = \"/Users/matthewkalender/Desktop/HealthHack/ekg-simulator/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport Chart from \"chart.js/auto\";\nimport \"./App.css\";\n\n// EKG Simulation Helper Functions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction gaussianWave(x, mean, amplitude, width) {\n  return amplitude * Math.exp(-((x - mean) ** 2) / (2 * width ** 2));\n}\nfunction ekgWaveform(t, heartRate = 60, arrhythmiaType) {\n  const beatDuration = 60 / heartRate;\n  let ekgBeat = Array(t.length).fill(0);\n\n  // Define wave positions\n  const pWaveStart = arrhythmias[arrhythmiaType].Pwave ? 0.2 * beatDuration : null; // P wave presence\n  const qWaveStart = 0.4 * beatDuration;\n  const rWaveStart = 0.45 * beatDuration;\n  const sWaveStart = 0.5 * beatDuration;\n  const tWaveStart = 0.7 * beatDuration;\n\n  // Adjust for placement of P wave\n  const pWavePlacement = arrhythmias[arrhythmiaType].Placement;\n\n  // Add P wave\n  if (pWaveStart !== null) {\n    // If P wave is placed after QRS complex\n    if (pWavePlacement) {\n      ekgBeat = ekgBeat.map((y, i) => y + gaussianWave(t[i], rWaveStart + 0.1 * beatDuration, 0.1, 0.05 * beatDuration));\n    } else {\n      ekgBeat = ekgBeat.map((y, i) => y + gaussianWave(t[i], pWaveStart, 0.1, 0.05 * beatDuration));\n    }\n  }\n\n  // QRS complex and T wave\n  ekgBeat = ekgBeat.map((y, i) => y - gaussianWave(t[i], qWaveStart, 0.15, 0.02 * beatDuration) + gaussianWave(t[i], rWaveStart, 1.0, 0.01 * beatDuration) - gaussianWave(t[i], sWaveStart, 0.2, 0.02 * beatDuration) + gaussianWave(t[i], tWaveStart, 0.3, 0.1 * beatDuration));\n\n  // Adjust for inverted P wave in AVRT\n  if (arrhythmias[arrhythmiaType].Ppositive === false && arrhythmias[arrhythmiaType].Pwave) {\n    ekgBeat = ekgBeat.map((y, i) => y - gaussianWave(t[i], pWaveStart, 0.1, 0.05 * beatDuration)); // Inverted P wave\n  }\n  return ekgBeat;\n}\nfunction generateEKG(duration = 5, heartRate = 72, samplingRate = 1000, numWaves = 1, arrhythmiaType) {\n  const numSamples = duration * samplingRate;\n  const t = Array.from({\n    length: numSamples\n  }, (_, i) => i / samplingRate);\n  let ekgSignal = Array(t.length).fill(0);\n  for (let i = 0; i < numWaves; i++) {\n    const start = Math.floor(i * (60 / heartRate) * samplingRate);\n    const end = start + Math.floor(60 / heartRate * samplingRate);\n    const ekgBeat = ekgWaveform(t.slice(0, end - start), heartRate, arrhythmiaType);\n    for (let j = start; j < end && j < ekgSignal.length; j++) {\n      ekgSignal[j] += ekgBeat[j - start] + 0.05 * (Math.random() - 0.5); // Add noise\n    }\n  }\n\n  // Trim the time and ekgSignal arrays to contain only the relevant data\n  const trimmedEnd = Math.ceil(numWaves * (60 / heartRate) * samplingRate);\n  return {\n    t: t.slice(0, trimmedEnd),\n    ekgSignal: ekgSignal.slice(0, trimmedEnd)\n  };\n}\n\n// Arrhythmias data structure\nconst arrhythmias = {\n  \"Sinus Tachycardia\": {\n    heartRate: 100,\n    Pwave: true,\n    RtR: true,\n    // Regular R-R intervals\n    Placement: false,\n    // P wave before QRS complex\n    description: \"Regular rhythm with a P wave preceding every QRS complex.\"\n  },\n  \"Afib with RVR\": {\n    heartRate: 150,\n    Pwave: false,\n    Placement: false,\n    description: \"Lacks distinct P waves, has variable R-R intervals.\"\n  },\n  \"AVRT\": {\n    heartRate: 220,\n    Pwave: true,\n    Placement: true,\n    Ppositive: false,\n    // P wave is upside down\n    description: \"Very fast rate (200-300 bpm), with retrograde P waves.\"\n  },\n  \"AVNRT\": {\n    heartRate: 180,\n    Pwave: false,\n    RtR: false,\n    // Irregular R-R intervals\n    description: \"Fast rate, with retrograde P waves possibly overlaying the QRS.\"\n  }\n};\nfunction EKGSimulator() {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  const [userDiagnosis, setUserDiagnosis] = useState(\"\");\n  const [chosenEKGType, setChosenEKGType] = useState(\"\");\n  const [numPulses, setNumPulses] = useState(3); // Default to 3 pulses\n\n  const handleDiagnosisChange = event => {\n    setUserDiagnosis(event.target.value);\n  };\n  const handleNumPulsesChange = event => {\n    const value = parseInt(event.target.value);\n    if (value === 3 || value === 5) {\n      setNumPulses(value);\n    }\n  };\n  const checkDiagnosis = () => {\n    if (userDiagnosis.toLowerCase() === chosenEKGType.toLowerCase()) {\n      alert(\"Correct! Well done!\");\n    } else {\n      alert(`Incorrect. The correct answer was '${chosenEKGType}'.`);\n    }\n    // Show explanation\n    alert(arrhythmias[chosenEKGType].description);\n  };\n  const simulateRandomEKG = () => {\n    const arrhythmiaTypes = Object.keys(arrhythmias);\n    const randomType = arrhythmiaTypes[Math.floor(Math.random() * arrhythmiaTypes.length)];\n    setChosenEKGType(randomType);\n    const {\n      heartRate\n    } = arrhythmias[randomType];\n    const {\n      t,\n      ekgSignal\n    } = generateEKG(5, heartRate, 1000, numPulses, randomType); // Generate based on arrhythmia type\n\n    const data = {\n      labels: t,\n      datasets: [{\n        label: `EKG Signal - ${randomType}`,\n        data: ekgSignal,\n        borderColor: \"black\",\n        // Change the line color to black\n        pointRadius: 0,\n        // Remove bullet points\n        showLine: true,\n        // Ensure line is shown\n        fill: false\n      }]\n    };\n    setChartData(data);\n  };\n  useEffect(() => {\n    simulateRandomEKG();\n  }, [numPulses]); // Re-run simulation when numPulses changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"EKG Simulator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userDiagnosis,\n        onChange: handleDiagnosisChange,\n        placeholder: \"Enter your diagnosis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: checkDiagnosis,\n        children: \"Submit Diagnosis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Number of pulses:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: numPulses,\n          onChange: handleNumPulsesChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: 3,\n            children: \"3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: 5,\n            children: \"5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: simulateRandomEKG,\n        children: \"Generate EKG\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      style: {\n        height: '400px',\n        width: '90%',\n        margin: '0 auto'\n      },\n      children: chartData && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart\",\n        children: /*#__PURE__*/_jsxDEV(Line, {\n          data: chartData,\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            scales: {\n              x: {\n                title: {\n                  display: true,\n                  text: 'Time (s)'\n                },\n                ticks: {\n                  font: {\n                    size: 14 // Adjust font size\n                  }\n                }\n              },\n              y: {\n                title: {\n                  display: true,\n                  text: 'Voltage (mV)'\n                },\n                beginAtZero: true,\n                ticks: {\n                  font: {\n                    size: 14 // Adjust font size\n                  }\n                }\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 9\n  }, this);\n}\n_s(EKGSimulator, \"jOaot8DIp93x66qbW7B5cqxaphk=\");\n_c = EKGSimulator;\nexport default EKGSimulator;\nvar _c;\n$RefreshReg$(_c, \"EKGSimulator\");","map":{"version":3,"names":["React","useState","useEffect","Line","Chart","jsxDEV","_jsxDEV","gaussianWave","x","mean","amplitude","width","Math","exp","ekgWaveform","t","heartRate","arrhythmiaType","beatDuration","ekgBeat","Array","length","fill","pWaveStart","arrhythmias","Pwave","qWaveStart","rWaveStart","sWaveStart","tWaveStart","pWavePlacement","Placement","map","y","i","Ppositive","generateEKG","duration","samplingRate","numWaves","numSamples","from","_","ekgSignal","start","floor","end","slice","j","random","trimmedEnd","ceil","RtR","description","EKGSimulator","_s","chartData","setChartData","userDiagnosis","setUserDiagnosis","chosenEKGType","setChosenEKGType","numPulses","setNumPulses","handleDiagnosisChange","event","target","value","handleNumPulsesChange","parseInt","checkDiagnosis","toLowerCase","alert","simulateRandomEKG","arrhythmiaTypes","Object","keys","randomType","data","labels","datasets","label","borderColor","pointRadius","showLine","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","onClick","style","height","margin","options","responsive","maintainAspectRatio","scales","title","display","text","ticks","font","size","beginAtZero","_c","$RefreshReg$"],"sources":["/Users/matthewkalender/Desktop/HealthHack/ekg-simulator/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport Chart from \"chart.js/auto\";\nimport \"./App.css\";\n\n// EKG Simulation Helper Functions\n\nfunction gaussianWave(x, mean, amplitude, width) {\n    return amplitude * Math.exp(-((x - mean) ** 2) / (2 * width ** 2));\n}\n\nfunction ekgWaveform(t, heartRate = 60, arrhythmiaType) {\n    const beatDuration = 60 / heartRate;\n    let ekgBeat = Array(t.length).fill(0);\n    \n    // Define wave positions\n    const pWaveStart = arrhythmias[arrhythmiaType].Pwave ? 0.2 * beatDuration : null; // P wave presence\n    const qWaveStart = 0.4 * beatDuration;\n    const rWaveStart = 0.45 * beatDuration;\n    const sWaveStart = 0.5 * beatDuration;\n    const tWaveStart = 0.7 * beatDuration;\n\n    // Adjust for placement of P wave\n    const pWavePlacement = arrhythmias[arrhythmiaType].Placement;\n\n    // Add P wave\n    if (pWaveStart !== null) {\n        // If P wave is placed after QRS complex\n        if (pWavePlacement) {\n            ekgBeat = ekgBeat.map((y, i) => y + gaussianWave(t[i], rWaveStart + 0.1 * beatDuration, 0.1, 0.05 * beatDuration));\n        } else {\n            ekgBeat = ekgBeat.map((y, i) => y + gaussianWave(t[i], pWaveStart, 0.1, 0.05 * beatDuration));\n        }\n    }\n\n    // QRS complex and T wave\n    ekgBeat = ekgBeat.map((y, i) => \n        y -\n        gaussianWave(t[i], qWaveStart, 0.15, 0.02 * beatDuration) +\n        gaussianWave(t[i], rWaveStart, 1.0, 0.01 * beatDuration) -\n        gaussianWave(t[i], sWaveStart, 0.2, 0.02 * beatDuration) +\n        gaussianWave(t[i], tWaveStart, 0.3, 0.1 * beatDuration)\n    );\n\n    // Adjust for inverted P wave in AVRT\n    if (arrhythmias[arrhythmiaType].Ppositive === false && arrhythmias[arrhythmiaType].Pwave) {\n        ekgBeat = ekgBeat.map((y, i) => y - gaussianWave(t[i], pWaveStart, 0.1, 0.05 * beatDuration)); // Inverted P wave\n    }\n\n    return ekgBeat;\n}\n\nfunction generateEKG(duration = 5, heartRate = 72, samplingRate = 1000, numWaves = 1, arrhythmiaType) {\n    const numSamples = duration * samplingRate;\n    const t = Array.from({ length: numSamples }, (_, i) => i / samplingRate);\n    let ekgSignal = Array(t.length).fill(0);\n\n    for (let i = 0; i < numWaves; i++) {\n        const start = Math.floor(i * (60 / heartRate) * samplingRate);\n        const end = start + Math.floor((60 / heartRate) * samplingRate);\n        const ekgBeat = ekgWaveform(t.slice(0, end - start), heartRate, arrhythmiaType);\n        \n        for (let j = start; j < end && j < ekgSignal.length; j++) {\n            ekgSignal[j] += ekgBeat[j - start] + 0.05 * (Math.random() - 0.5); // Add noise\n        }\n    }\n\n    // Trim the time and ekgSignal arrays to contain only the relevant data\n    const trimmedEnd = Math.ceil(numWaves * (60 / heartRate) * samplingRate);\n    return { t: t.slice(0, trimmedEnd), ekgSignal: ekgSignal.slice(0, trimmedEnd) };\n}\n\n// Arrhythmias data structure\nconst arrhythmias = {\n    \"Sinus Tachycardia\": { \n        heartRate: 100,\n        Pwave: true,\n        RtR: true, // Regular R-R intervals\n        Placement: false, // P wave before QRS complex\n        description: \"Regular rhythm with a P wave preceding every QRS complex.\" \n    },\n    \"Afib with RVR\": { \n        heartRate: 150,\n        Pwave: false,\n        Placement: false, \n        description: \"Lacks distinct P waves, has variable R-R intervals.\" \n    },\n    \"AVRT\": { \n        heartRate: 220,\n        Pwave: true,\n        Placement: true,\n        Ppositive: false, // P wave is upside down\n        description: \"Very fast rate (200-300 bpm), with retrograde P waves.\" \n    },\n    \"AVNRT\": { \n        heartRate: 180,\n        Pwave: false,\n        RtR: false, // Irregular R-R intervals\n        description: \"Fast rate, with retrograde P waves possibly overlaying the QRS.\" \n    }\n};\n\nfunction EKGSimulator() {\n    const [chartData, setChartData] = useState(null);\n    const [userDiagnosis, setUserDiagnosis] = useState(\"\");\n    const [chosenEKGType, setChosenEKGType] = useState(\"\");\n    const [numPulses, setNumPulses] = useState(3); // Default to 3 pulses\n\n    const handleDiagnosisChange = (event) => {\n        setUserDiagnosis(event.target.value);\n    };\n\n    const handleNumPulsesChange = (event) => {\n        const value = parseInt(event.target.value);\n        if (value === 3 || value === 5) {\n            setNumPulses(value);\n        }\n    };\n\n    const checkDiagnosis = () => {\n        if (userDiagnosis.toLowerCase() === chosenEKGType.toLowerCase()) {\n            alert(\"Correct! Well done!\");\n        } else {\n            alert(`Incorrect. The correct answer was '${chosenEKGType}'.`);\n        }\n        // Show explanation\n        alert(arrhythmias[chosenEKGType].description);\n    };\n\n    const simulateRandomEKG = () => {\n        const arrhythmiaTypes = Object.keys(arrhythmias);\n        const randomType = arrhythmiaTypes[Math.floor(Math.random() * arrhythmiaTypes.length)];\n        setChosenEKGType(randomType);\n\n        const { heartRate } = arrhythmias[randomType];\n        const { t, ekgSignal } = generateEKG(5, heartRate, 1000, numPulses, randomType); // Generate based on arrhythmia type\n\n        const data = {\n            labels: t,\n            datasets: [{\n                label: `EKG Signal - ${randomType}`,\n                data: ekgSignal,\n                borderColor: \"black\", // Change the line color to black\n                pointRadius: 0, // Remove bullet points\n                showLine: true,  // Ensure line is shown\n                fill: false\n            }],\n        };\n\n        setChartData(data);\n    };\n\n    useEffect(() => {\n        simulateRandomEKG();\n    }, [numPulses]); // Re-run simulation when numPulses changes\n\n    return (\n        <div className=\"App\">\n            <h1>EKG Simulator</h1>\n            <div>\n                <input\n                    type=\"text\"\n                    value={userDiagnosis}\n                    onChange={handleDiagnosisChange}\n                    placeholder=\"Enter your diagnosis\"\n                />\n                <button onClick={checkDiagnosis}>Submit Diagnosis</button>\n                <br />\n                <label>\n                    Number of pulses:\n                    <select value={numPulses} onChange={handleNumPulsesChange}>\n                        <option value={3}>3</option>\n                        <option value={5}>5</option>\n                    </select>\n                </label>\n                <button onClick={simulateRandomEKG}>Generate EKG</button>\n            </div>\n            <div className=\"chart-container\" style={{ height: '400px', width: '90%', margin: '0 auto' }}>\n                {chartData && (\n                    <div className=\"chart\">\n                        <Line data={chartData} options={{\n                            responsive: true,\n                            maintainAspectRatio: false,\n                            scales: {\n                                x: {\n                                    title: {\n                                        display: true,\n                                        text: 'Time (s)',\n                                    },\n                                    ticks: {\n                                        font: {\n                                            size: 14 // Adjust font size\n                                        }\n                                    }\n                                },\n                                y: {\n                                    title: {\n                                        display: true,\n                                        text: 'Voltage (mV)',\n                                    },\n                                    beginAtZero: true,\n                                    ticks: {\n                                        font: {\n                                            size: 14 // Adjust font size\n                                        }\n                                    }\n                                }\n                            },\n                        }} />\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default EKGSimulator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}