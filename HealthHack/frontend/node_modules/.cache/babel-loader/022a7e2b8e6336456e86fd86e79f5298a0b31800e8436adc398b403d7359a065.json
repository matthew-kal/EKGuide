{"ast":null,"code":"// src/utils/ekgUtils.js\n\n// Helper function for Gaussian wave\nexport function gaussianWave(x, mean, amplitude, width) {\n  return amplitude * Math.exp(-((x - mean) ** 2) / (2 * width ** 2));\n}\n\n// Function to generate an EKG waveform\nexport function ekgWaveform(t, heartRate = 60, pWave = true, variableRR = false, flutterRatio = null, retrogradeP = false) {\n  const beatDuration = 60 / heartRate;\n  let ekgBeat = Array(t.length).fill(0);\n  const peaks = {};\n\n  // Define wave positions\n  const pWaveStart = pWave ? 0.2 * beatDuration : null;\n  const qWaveStart = 0.4 * beatDuration;\n  const rWaveStart = 0.45 * beatDuration;\n  const sWaveStart = 0.5 * beatDuration;\n  const tWaveStart = 0.7 * beatDuration;\n\n  // Add P wave\n  if (pWave) {\n    ekgBeat = ekgBeat.map((y, i) => y + gaussianWave(t[i], pWaveStart, 0.1, 0.05 * beatDuration));\n  }\n\n  // QRS complex and T wave\n  ekgBeat = ekgBeat.map((y, i) => y - gaussianWave(t[i], qWaveStart, 0.15, 0.02 * beatDuration) + gaussianWave(t[i], rWaveStart, 1.0, 0.01 * beatDuration) - gaussianWave(t[i], sWaveStart, 0.2, 0.02 * beatDuration) + gaussianWave(t[i], tWaveStart, 0.3, 0.1 * beatDuration));\n\n  // Variable R-R interval\n  if (variableRR) {\n    const randomFactor = Math.random() * 0.4 + 0.8; // Random between 0.8 and 1.2\n    beatDuration *= randomFactor;\n  }\n\n  // Retrograde P waves\n  if (retrogradeP) {\n    const retrogradePosition = rWaveStart - 0.15 * beatDuration;\n    ekgBeat = ekgBeat.map((y, i) => y + gaussianWave(t[i], retrogradePosition, -0.08, 0.04 * beatDuration));\n  }\n\n  // Simulate flutter waves if specified\n  if (flutterRatio && pWaveStart) {\n    const flutterFrequency = flutterRatio * heartRate / 60;\n    for (let i = 0; i < flutterRatio; i++) {\n      const flutterPosition = pWaveStart + i * (0.6 / flutterFrequency);\n      ekgBeat = ekgBeat.map((y, i) => y + gaussianWave(t[i], flutterPosition, 0.1, 0.05 * beatDuration));\n    }\n  }\n  peaks.P = pWaveStart;\n  peaks.Q = qWaveStart;\n  peaks.R = rWaveStart;\n  peaks.S = sWaveStart;\n  peaks.T = tWaveStart;\n  return {\n    ekgBeat,\n    peaks\n  };\n}\n\n// Function to generate the complete EKG signal\nexport function generateEKG(duration = 10, heartRate = 72, samplingRate = 1000, ...params) {\n  const numSamples = duration * samplingRate;\n  const t = Array.from({\n    length: numSamples\n  }, (_, i) => i / samplingRate);\n  let ekgSignal = Array(t.length).fill(0);\n  const peaksList = [];\n  for (let i = 0; i < Math.floor(duration * heartRate / 60); i++) {\n    const start = Math.floor(i * 60 / heartRate * samplingRate);\n    const end = start + Math.floor(60 / heartRate * samplingRate);\n    const {\n      ekgBeat,\n      peaks\n    } = ekgWaveform(t.slice(0, end - start), heartRate, ...params);\n\n    // Add noise and combine beats\n    for (let j = start; j < end && j < ekgSignal.length; j++) {\n      ekgSignal[j] = ekgBeat[j - start] + 0.05 * (Math.random() - 0.5);\n    }\n    for (let [peak, time] of Object.entries(peaks)) {\n      if (time !== null) {\n        peaksList.push({\n          peak,\n          time: t[start] + time\n        });\n      }\n    }\n  }\n  return {\n    t,\n    ekgSignal,\n    peaksList\n  };\n}","map":{"version":3,"names":["gaussianWave","x","mean","amplitude","width","Math","exp","ekgWaveform","t","heartRate","pWave","variableRR","flutterRatio","retrogradeP","beatDuration","ekgBeat","Array","length","fill","peaks","pWaveStart","qWaveStart","rWaveStart","sWaveStart","tWaveStart","map","y","i","randomFactor","random","retrogradePosition","flutterFrequency","flutterPosition","P","Q","R","S","T","generateEKG","duration","samplingRate","params","numSamples","from","_","ekgSignal","peaksList","floor","start","end","slice","j","peak","time","Object","entries","push"],"sources":["/Users/matthewkalender/Desktop/HealthHack/ekg-simulator/src/utils/ekgUtils.js"],"sourcesContent":["// src/utils/ekgUtils.js\n\n// Helper function for Gaussian wave\nexport function gaussianWave(x, mean, amplitude, width) {\n    return amplitude * Math.exp(-((x - mean) ** 2) / (2 * width ** 2));\n}\n\n// Function to generate an EKG waveform\nexport function ekgWaveform(t, heartRate = 60, pWave = true, variableRR = false, flutterRatio = null, retrogradeP = false) {\n    const beatDuration = 60 / heartRate;\n    let ekgBeat = Array(t.length).fill(0);\n    const peaks = {};\n\n    // Define wave positions\n    const pWaveStart = pWave ? 0.2 * beatDuration : null;\n    const qWaveStart = 0.4 * beatDuration;\n    const rWaveStart = 0.45 * beatDuration;\n    const sWaveStart = 0.5 * beatDuration;\n    const tWaveStart = 0.7 * beatDuration;\n\n    // Add P wave\n    if (pWave) {\n        ekgBeat = ekgBeat.map((y, i) => y + gaussianWave(t[i], pWaveStart, 0.1, 0.05 * beatDuration));\n    }\n\n    // QRS complex and T wave\n    ekgBeat = ekgBeat.map((y, i) =>\n        y -\n        gaussianWave(t[i], qWaveStart, 0.15, 0.02 * beatDuration) +\n        gaussianWave(t[i], rWaveStart, 1.0, 0.01 * beatDuration) -\n        gaussianWave(t[i], sWaveStart, 0.2, 0.02 * beatDuration) +\n        gaussianWave(t[i], tWaveStart, 0.3, 0.1 * beatDuration)\n    );\n\n    // Variable R-R interval\n    if (variableRR) {\n        const randomFactor = Math.random() * 0.4 + 0.8; // Random between 0.8 and 1.2\n        beatDuration *= randomFactor;\n    }\n\n    // Retrograde P waves\n    if (retrogradeP) {\n        const retrogradePosition = rWaveStart - 0.15 * beatDuration;\n        ekgBeat = ekgBeat.map((y, i) => y + gaussianWave(t[i], retrogradePosition, -0.08, 0.04 * beatDuration));\n    }\n\n    // Simulate flutter waves if specified\n    if (flutterRatio && pWaveStart) {\n        const flutterFrequency = flutterRatio * heartRate / 60;\n        for (let i = 0; i < flutterRatio; i++) {\n            const flutterPosition = pWaveStart + i * (0.6 / flutterFrequency);\n            ekgBeat = ekgBeat.map((y, i) => y + gaussianWave(t[i], flutterPosition, 0.1, 0.05 * beatDuration));\n        }\n    }\n\n    peaks.P = pWaveStart;\n    peaks.Q = qWaveStart;\n    peaks.R = rWaveStart;\n    peaks.S = sWaveStart;\n    peaks.T = tWaveStart;\n\n    return { ekgBeat, peaks };\n}\n\n// Function to generate the complete EKG signal\nexport function generateEKG(duration = 10, heartRate = 72, samplingRate = 1000, ...params) {\n    const numSamples = duration * samplingRate;\n    const t = Array.from({ length: numSamples }, (_, i) => i / samplingRate);\n    let ekgSignal = Array(t.length).fill(0);\n    const peaksList = [];\n\n    for (let i = 0; i < Math.floor(duration * heartRate / 60); i++) {\n        const start = Math.floor(i * 60 / heartRate * samplingRate);\n        const end = start + Math.floor(60 / heartRate * samplingRate);\n        const { ekgBeat, peaks } = ekgWaveform(\n            t.slice(0, end - start),\n            heartRate,\n            ...params\n        );\n\n        // Add noise and combine beats\n        for (let j = start; j < end && j < ekgSignal.length; j++) {\n            ekgSignal[j] = ekgBeat[j - start] + 0.05 * (Math.random() - 0.5);\n        }\n\n        for (let [peak, time] of Object.entries(peaks)) {\n            if (time !== null) {\n                peaksList.push({ peak, time: t[start] + time });\n            }\n        }\n    }\n\n    return { t, ekgSignal, peaksList };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}