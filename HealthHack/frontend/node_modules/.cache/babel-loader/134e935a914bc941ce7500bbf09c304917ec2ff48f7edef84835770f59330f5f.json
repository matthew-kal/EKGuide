{"ast":null,"code":"import _ from \"lodash\";\n\n// Gaussian wave function for simulating waveform peaks\nfunction gaussianWave(x, mean, amplitude, width) {\n  return amplitude * Math.exp(-((x - mean) ** 2) / (2 * width ** 2));\n}\n\n// EKG waveform simulation based on arrhythmia characteristics\nfunction ekgWaveform(t, {\n  heartRate = 60,\n  pWave = true,\n  constantRR = true,\n  retrogradeP = false\n}) {\n  const beatDuration = 60 / heartRate;\n  let ekgBeat = Array(t.length).fill(0);\n  let peakTimes = {};\n\n  // Define specific timings for the P, QRS, and T waves\n  const pWaveStart = pWave ? 0.2 * beatDuration : null;\n  const qWaveStart = 0.4 * beatDuration;\n  const rWaveStart = 0.45 * beatDuration;\n  const sWaveStart = 0.5 * beatDuration;\n  const tWaveStart = 0.7 * beatDuration;\n\n  // Generate P wave\n  if (pWaveStart !== null) {\n    const pAmplitude = retrogradeP ? -0.1 : 0.1;\n    ekgBeat = ekgBeat.map((val, index) => val + gaussianWave(t[index], pWaveStart, pAmplitude, 0.05 * beatDuration));\n    peakTimes['P'] = pWaveStart;\n  }\n\n  // Generate QRS complex and T wave\n  ekgBeat = ekgBeat.map((val, index) => val - gaussianWave(t[index], qWaveStart, 0.15, 0.02 * beatDuration) + gaussianWave(t[index], rWaveStart, 1.0, 0.01 * beatDuration) - gaussianWave(t[index], sWaveStart, 0.2, 0.02 * beatDuration) + gaussianWave(t[index], tWaveStart, 0.3, 0.1 * beatDuration));\n  peakTimes['Q'] = qWaveStart;\n  peakTimes['R'] = rWaveStart;\n  peakTimes['S'] = sWaveStart;\n  peakTimes['T'] = tWaveStart;\n  return {\n    ekgBeat,\n    peakTimes\n  };\n}\n\n// Generate the complete EKG signal\nfunction generateEKG(duration, heartRate, samplingRate, params) {\n  const numSamples = duration * samplingRate;\n  const t = _.range(0, duration, 1 / samplingRate);\n  let ekgSignal = Array(numSamples).fill(0);\n  let peakTimesAll = [];\n  for (let i = 0; i < Math.floor(duration * heartRate / 60); i++) {\n    const start = Math.floor(i * 60 / heartRate * samplingRate);\n    const end = start + Math.floor(60 / heartRate * samplingRate);\n    const {\n      ekgBeat,\n      peakTimes\n    } = ekgWaveform(t.slice(0, end - start), {\n      heartRate,\n      ...params\n    });\n    for (let j = 0; j < end - start; j++) {\n      ekgSignal[start + j] = ekgBeat[j];\n    }\n\n    // Convert peak times\n    Object.keys(peakTimes).forEach(peak => {\n      peakTimesAll.push({\n        peak,\n        time: t[start] + peakTimes[peak]\n      });\n    });\n  }\n  return {\n    t,\n    ekgSignal,\n    peakTimesAll\n  };\n}\nexport { generateEKG };","map":{"version":3,"names":["_","gaussianWave","x","mean","amplitude","width","Math","exp","ekgWaveform","t","heartRate","pWave","constantRR","retrogradeP","beatDuration","ekgBeat","Array","length","fill","peakTimes","pWaveStart","qWaveStart","rWaveStart","sWaveStart","tWaveStart","pAmplitude","map","val","index","generateEKG","duration","samplingRate","params","numSamples","range","ekgSignal","peakTimesAll","i","floor","start","end","slice","j","Object","keys","forEach","peak","push","time"],"sources":["/Users/matthewkalender/Desktop/HealthHack/ekg-simulator/src/utils/ekgUtils.js"],"sourcesContent":["import _ from \"lodash\";\n\n// Gaussian wave function for simulating waveform peaks\nfunction gaussianWave(x, mean, amplitude, width) {\n    return amplitude * Math.exp(-((x - mean) ** 2) / (2 * width ** 2));\n}\n\n// EKG waveform simulation based on arrhythmia characteristics\nfunction ekgWaveform(t, { heartRate = 60, pWave = true, constantRR = true, retrogradeP = false }) {\n    const beatDuration = 60 / heartRate;\n    let ekgBeat = Array(t.length).fill(0);\n    let peakTimes = {};\n\n    // Define specific timings for the P, QRS, and T waves\n    const pWaveStart = pWave ? 0.2 * beatDuration : null;\n    const qWaveStart = 0.4 * beatDuration;\n    const rWaveStart = 0.45 * beatDuration;\n    const sWaveStart = 0.5 * beatDuration;\n    const tWaveStart = 0.7 * beatDuration;\n\n    // Generate P wave\n    if (pWaveStart !== null) {\n        const pAmplitude = retrogradeP ? -0.1 : 0.1;\n        ekgBeat = ekgBeat.map((val, index) =>\n            val + gaussianWave(t[index], pWaveStart, pAmplitude, 0.05 * beatDuration)\n        );\n        peakTimes['P'] = pWaveStart;\n    }\n\n    // Generate QRS complex and T wave\n    ekgBeat = ekgBeat.map((val, index) =>\n        val - gaussianWave(t[index], qWaveStart, 0.15, 0.02 * beatDuration)\n            + gaussianWave(t[index], rWaveStart, 1.0, 0.01 * beatDuration)\n            - gaussianWave(t[index], sWaveStart, 0.2, 0.02 * beatDuration)\n            + gaussianWave(t[index], tWaveStart, 0.3, 0.1 * beatDuration)\n    );\n\n    peakTimes['Q'] = qWaveStart;\n    peakTimes['R'] = rWaveStart;\n    peakTimes['S'] = sWaveStart;\n    peakTimes['T'] = tWaveStart;\n\n    return { ekgBeat, peakTimes };\n}\n\n// Generate the complete EKG signal\nfunction generateEKG(duration, heartRate, samplingRate, params) {\n    const numSamples = duration * samplingRate;\n    const t = _.range(0, duration, 1 / samplingRate);\n    let ekgSignal = Array(numSamples).fill(0);\n    let peakTimesAll = [];\n\n    for (let i = 0; i < Math.floor(duration * heartRate / 60); i++) {\n        const start = Math.floor(i * 60 / heartRate * samplingRate);\n        const end = start + Math.floor(60 / heartRate * samplingRate);\n        const { ekgBeat, peakTimes } = ekgWaveform(t.slice(0, end - start), { heartRate, ...params });\n\n        for (let j = 0; j < end - start; j++) {\n            ekgSignal[start + j] = ekgBeat[j];\n        }\n\n        // Convert peak times\n        Object.keys(peakTimes).forEach(peak => {\n            peakTimesAll.push({ peak, time: t[start] + peakTimes[peak] });\n        });\n    }\n\n    return { t, ekgSignal, peakTimesAll };\n}\n\nexport { generateEKG };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}