{"ast":null,"code":"var _jsxFileName = \"/Users/matthewkalender/Desktop/HealthHack/ekg-simulator/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport Chart from \"chart.js/auto\";\nimport \"./App.css\"; // Ensure this file is created for styles\n\n// Arrhythmias data structure\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst arrhythmias = {\n  \"Sinus Tachycardia\": {\n    heartRate: 100,\n    Pwave: true,\n    RtR: true,\n    // Regular R-R intervals\n    Placement: false,\n    // P wave before QRS complex\n    Ppositive: true,\n    // P wave is upside down\n    description: \"Regular rhythm with a P wave preceding every QRS complex.\"\n  },\n  \"Afib with RVR\": {\n    heartRate: 150,\n    Pwave: false,\n    RtR: false,\n    Placement: false,\n    description: \"Lacks distinct P waves, has variable R-R intervals.\"\n  },\n  \"AVRT\": {\n    heartRate: 220,\n    Pwave: true,\n    RtR: true,\n    Placement: true,\n    Ppositive: false,\n    // P wave is upside down\n    description: \"Very fast rate (200-300 bpm), with retrograde P waves.\"\n  },\n  \"AVNRT\": {\n    heartRate: 180,\n    Pwave: false,\n    RtR: true,\n    // Irregular R-R intervals\n    Placement: false,\n    description: \"Fast rate, with retrograde P waves possibly overlaying the QRS.\"\n  }\n};\n\n// Merged function to generate EKG waveform and signal\nfunction generateEKG(duration = 5, arrhythmiaType, samplingRate = 1000, numWaves = 1) {\n  const numSamples = duration * samplingRate; // Total number of samples to generate\n  const t = Array.from({\n    length: numSamples\n  }, (_, i) => i / samplingRate); // Time array\n  let ekgSignal = Array(t.length).fill(0); // Initialize the EKG signal array\n  const heartRate = arrhythmias[arrhythmiaType].heartRate; // Get heart rate for the chosen arrhythmia\n  const beatDuration = 60 / heartRate; // Calculate the duration of one heartbeat\n\n  // Gaussian wave generator\n  function gaussianWave(x, mean, amplitude, width) {\n    return amplitude * Math.exp(-((x - mean) ** 2) / (2 * width ** 2));\n  }\n\n  // EKG waveform generation\n  const wavePositions = []; // To hold positions for P, Q, R, S, T waves\n  for (let i = 0; i < numWaves; i++) {\n    let start = Math.floor(i * (60 / heartRate) * samplingRate);\n    let end = start + Math.floor(60 / heartRate * samplingRate);\n    let ekgBeat = Array(t.length).fill(0); // Initialize the EKG beat array\n\n    // Define wave positions\n    const pWaveStart = arrhythmias[arrhythmiaType].Pwave ? 0.2 * beatDuration : null; // P wave presence\n    const qWaveStart = 0.4 * beatDuration; // Q wave position\n    const rWaveStart = 0.45 * beatDuration; // R wave position\n    const sWaveStart = 0.5 * beatDuration; // S wave position\n    const tWaveStart = 0.7 * beatDuration; // T wave position\n\n    // Store the positions for highlighting\n    if (pWaveStart !== null) wavePositions.push({\n      type: 'P',\n      start: start + Math.floor(pWaveStart * samplingRate),\n      end: start + Math.floor((pWaveStart + 0.1 * beatDuration) * samplingRate)\n    });\n    wavePositions.push({\n      type: 'Q',\n      start: start + Math.floor(qWaveStart * samplingRate),\n      end: start + Math.floor((qWaveStart + 0.1 * beatDuration) * samplingRate)\n    });\n    wavePositions.push({\n      type: 'R',\n      start: start + Math.floor(rWaveStart * samplingRate),\n      end: start + Math.floor((rWaveStart + 0.1 * beatDuration) * samplingRate)\n    });\n    wavePositions.push({\n      type: 'S',\n      start: start + Math.floor(sWaveStart * samplingRate),\n      end: start + Math.floor((sWaveStart + 0.1 * beatDuration) * samplingRate)\n    });\n    wavePositions.push({\n      type: 'T',\n      start: start + Math.floor(tWaveStart * samplingRate),\n      end: start + Math.floor((tWaveStart + 0.2 * beatDuration) * samplingRate)\n    });\n\n    // Adjust for placement of P wave\n    const pWavePlacement = arrhythmias[arrhythmiaType].Placement;\n\n    // Add P wave based on its presence and placement\n    if (pWaveStart !== null) {\n      if (pWavePlacement) {\n        ekgBeat = ekgBeat.map((y, i) => y + gaussianWave(t[i], rWaveStart + 0.1 * beatDuration, 0.1, 0.05 * beatDuration));\n      } else {\n        ekgBeat = ekgBeat.map((y, i) => y + gaussianWave(t[i], pWaveStart, 0.1, 0.05 * beatDuration));\n      }\n    }\n\n    // Add QRS complex and T wave\n    ekgBeat = ekgBeat.map((y, i) => y - gaussianWave(t[i], qWaveStart, 0.15, 0.02 * beatDuration) +\n    // Q wave\n    gaussianWave(t[i], rWaveStart, 1.0, 0.01 * beatDuration) -\n    // R wave\n    gaussianWave(t[i], sWaveStart, 0.2, 0.02 * beatDuration) +\n    // S wave\n    gaussianWave(t[i], tWaveStart, 0.3, 0.1 * beatDuration) // T wave\n    );\n\n    // Adjust for inverted P wave in AVRT\n    if (arrhythmias[arrhythmiaType].Ppositive === false && arrhythmias[arrhythmiaType].Pwave) {\n      ekgBeat = ekgBeat.map((y, i) => y - gaussianWave(t[i], pWaveStart, 0.1, 0.05 * beatDuration) // Inverted P wave\n      );\n    }\n\n    // Add the EKG beat to the overall signal\n    for (let j = start; j < end && j < ekgSignal.length; j++) {\n      ekgSignal[j] += ekgBeat[j - start] + 0.05; // Add noise\n    }\n  }\n\n  // Trim the time and ekgSignal arrays to contain only the relevant data\n  const trimmedEnd = Math.ceil(numWaves * (60 / heartRate) * samplingRate);\n  return {\n    t: t.slice(0, trimmedEnd),\n    ekgSignal: ekgSignal.slice(0, trimmedEnd),\n    wavePositions\n  };\n}\nfunction EKGSimulator() {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  const [showLabeledGraph, setShowLabeledGraph] = useState(false);\n  const [userDiagnosis, setUserDiagnosis] = useState(\"\");\n  const [userReasoning, setUserReasoning] = useState(\"\");\n  const [chosenEKGType, setChosenEKGType] = useState(\"\");\n  const [numPulses, setNumPulses] = useState(3); // Default to 3 pulses\n  const [wavePositions, setWavePositions] = useState([]);\n  const handleDiagnosisChange = event => {\n    setUserDiagnosis(event.target.value);\n  };\n  const handleReasoningChange = event => {\n    setUserReasoning(event.target.value); // Fixed this line\n  };\n  const handleNumPulsesChange = event => {\n    const value = parseInt(event.target.value);\n    if (value === 3 || value === 5) {\n      setNumPulses(value);\n    }\n  };\n  const checkDiagnosis = () => {\n    if (userDiagnosis.toLowerCase() === chosenEKGType.toLowerCase()) {\n      alert(\"Correct! Well done!\");\n      setShowLabeledGraph(false); // Hide the labeled graph if the answer is correct\n    } else {\n      alert(`Incorrect. The correct answer was '${chosenEKGType}'.`);\n      setShowLabeledGraph(true); // Show the labeled graph if the answer is incorrect\n    }\n  };\n  const simulateRandomEKG = () => {\n    const arrhythmiaTypes = Object.keys(arrhythmias);\n    const randomType = arrhythmiaTypes[Math.floor(Math.random() * arrhythmiaTypes.length)];\n    setChosenEKGType(randomType); // Set the chosen EKG type\n    const {\n      t,\n      ekgSignal,\n      wavePositions: generatedWavePositions\n    } = generateEKG(5, randomType, 1000, numPulses);\n    setWavePositions(generatedWavePositions);\n    setChartData({\n      labels: t,\n      datasets: [{\n        label: 'EKG Signal',\n        data: ekgSignal,\n        fill: false,\n        borderColor: 'rgba(75, 192, 192, 1)',\n        tension: 0.1\n      }]\n    });\n  };\n\n  // Use useEffect to generate a random EKG when the component mounts\n  useEffect(() => {\n    simulateRandomEKG();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ekg-simulator\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"EKG Simulator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"diagnosis-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userDiagnosis,\n        onChange: handleDiagnosisChange,\n        placeholder: \"Enter your diagnosis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: userReasoning,\n        onChange: handleReasoningChange,\n        placeholder: \"Enter your reasoning\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: checkDiagnosis,\n        children: \"Submit Diagnosis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ekg-chart\",\n      children: chartData && /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData,\n        options: {\n          responsive: true\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 31\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }, this), showLabeledGraph && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"labeled-graph\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Correct EKG: \", chosenEKGType]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        data: {\n          labels: chartData.labels,\n          datasets: [{\n            label: 'Labeled EKG Signal',\n            data: chartData.datasets[0].data,\n            fill: false,\n            borderColor: 'red',\n            tension: 0.1\n          }]\n        },\n        options: {\n          responsive: true\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: arrhythmias[chosenEKGType].description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"footer\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: numPulses,\n        onChange: handleNumPulsesChange,\n        min: \"1\",\n        max: \"5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Number of Pulses: \", numPulses]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 9\n  }, this);\n}\n_s(EKGSimulator, \"JzFMaj4/bK0P0Ehh77KMPQ5cVqc=\");\n_c = EKGSimulator;\nexport default EKGSimulator;\nvar _c;\n$RefreshReg$(_c, \"EKGSimulator\");","map":{"version":3,"names":["React","useState","useEffect","Line","Chart","jsxDEV","_jsxDEV","arrhythmias","heartRate","Pwave","RtR","Placement","Ppositive","description","generateEKG","duration","arrhythmiaType","samplingRate","numWaves","numSamples","t","Array","from","length","_","i","ekgSignal","fill","beatDuration","gaussianWave","x","mean","amplitude","width","Math","exp","wavePositions","start","floor","end","ekgBeat","pWaveStart","qWaveStart","rWaveStart","sWaveStart","tWaveStart","push","type","pWavePlacement","map","y","j","trimmedEnd","ceil","slice","EKGSimulator","_s","chartData","setChartData","showLabeledGraph","setShowLabeledGraph","userDiagnosis","setUserDiagnosis","userReasoning","setUserReasoning","chosenEKGType","setChosenEKGType","numPulses","setNumPulses","setWavePositions","handleDiagnosisChange","event","target","value","handleReasoningChange","handleNumPulsesChange","parseInt","checkDiagnosis","toLowerCase","alert","simulateRandomEKG","arrhythmiaTypes","Object","keys","randomType","random","generatedWavePositions","labels","datasets","label","data","borderColor","tension","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","placeholder","onClick","options","responsive","min","max","_c","$RefreshReg$"],"sources":["/Users/matthewkalender/Desktop/HealthHack/ekg-simulator/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport Chart from \"chart.js/auto\";\nimport \"./App.css\"; // Ensure this file is created for styles\n\n// Arrhythmias data structure\nconst arrhythmias = {\n    \"Sinus Tachycardia\": { \n        heartRate: 100,\n        Pwave: true,\n        RtR: true, // Regular R-R intervals\n        Placement: false, // P wave before QRS complex\n        Ppositive: true, // P wave is upside down\n        description: \"Regular rhythm with a P wave preceding every QRS complex.\" \n    },\n    \"Afib with RVR\": {\n        heartRate: 150,\n        Pwave: false,\n\t    RtR: false,\n        Placement: false, \n        description: \"Lacks distinct P waves, has variable R-R intervals.\" \n    },\n    \"AVRT\": {\n        heartRate: 220,\n        Pwave: true,\n\t    RtR: true,\n        Placement: true,\n        Ppositive: false, // P wave is upside down\n        description: \"Very fast rate (200-300 bpm), with retrograde P waves.\" \n    },\n    \"AVNRT\": {\n        heartRate: 180,\n        Pwave: false,\n        RtR: true, // Irregular R-R intervals\n        Placement: false,\n        description: \"Fast rate, with retrograde P waves possibly overlaying the QRS.\" \n    }\n};\n\n// Merged function to generate EKG waveform and signal\nfunction generateEKG(duration = 5, arrhythmiaType, samplingRate = 1000, numWaves = 1) {\n    const numSamples = duration * samplingRate; // Total number of samples to generate\n    const t = Array.from({ length: numSamples }, (_, i) => i / samplingRate); // Time array\n    let ekgSignal = Array(t.length).fill(0); // Initialize the EKG signal array\n    const heartRate = arrhythmias[arrhythmiaType].heartRate; // Get heart rate for the chosen arrhythmia\n    const beatDuration = 60 / heartRate; // Calculate the duration of one heartbeat\n\n    // Gaussian wave generator\n    function gaussianWave(x, mean, amplitude, width) {\n        return amplitude * Math.exp(-((x - mean) ** 2) / (2 * width ** 2));\n    }\n\n    // EKG waveform generation\n    const wavePositions = []; // To hold positions for P, Q, R, S, T waves\n    for (let i = 0; i < numWaves; i++) {\n        let start = Math.floor(i * (60 / heartRate) * samplingRate);\n        let end = start + Math.floor((60 / heartRate) * samplingRate);\n        let ekgBeat = Array(t.length).fill(0); // Initialize the EKG beat array\n\n        // Define wave positions\n        const pWaveStart = arrhythmias[arrhythmiaType].Pwave ? 0.2 * beatDuration : null; // P wave presence\n        const qWaveStart = 0.4 * beatDuration; // Q wave position\n        const rWaveStart = 0.45 * beatDuration; // R wave position\n        const sWaveStart = 0.5 * beatDuration; // S wave position\n        const tWaveStart = 0.7 * beatDuration; // T wave position\n\n        // Store the positions for highlighting\n        if (pWaveStart !== null) wavePositions.push({ type: 'P', start: start + Math.floor(pWaveStart * samplingRate), end: start + Math.floor((pWaveStart + 0.1 * beatDuration) * samplingRate) });\n        wavePositions.push({ type: 'Q', start: start + Math.floor(qWaveStart * samplingRate), end: start + Math.floor((qWaveStart + 0.1 * beatDuration) * samplingRate) });\n        wavePositions.push({ type: 'R', start: start + Math.floor(rWaveStart * samplingRate), end: start + Math.floor((rWaveStart + 0.1 * beatDuration) * samplingRate) });\n        wavePositions.push({ type: 'S', start: start + Math.floor(sWaveStart * samplingRate), end: start + Math.floor((sWaveStart + 0.1 * beatDuration) * samplingRate) });\n        wavePositions.push({ type: 'T', start: start + Math.floor(tWaveStart * samplingRate), end: start + Math.floor((tWaveStart + 0.2 * beatDuration) * samplingRate) });\n\n        // Adjust for placement of P wave\n        const pWavePlacement = arrhythmias[arrhythmiaType].Placement;\n\n        // Add P wave based on its presence and placement\n        if (pWaveStart !== null) {\n            if (pWavePlacement) {\n                ekgBeat = ekgBeat.map((y, i) => \n                    y + gaussianWave(t[i], rWaveStart + 0.1 * beatDuration, 0.1, 0.05 * beatDuration)\n                );\n            } else {\n                ekgBeat = ekgBeat.map((y, i) => \n                    y + gaussianWave(t[i], pWaveStart, 0.1, 0.05 * beatDuration)\n                );\n            }\n        }\n\n        // Add QRS complex and T wave\n        ekgBeat = ekgBeat.map((y, i) => \n            y -\n            gaussianWave(t[i], qWaveStart, 0.15, 0.02 * beatDuration) + // Q wave\n            gaussianWave(t[i], rWaveStart, 1.0, 0.01 * beatDuration) - // R wave\n            gaussianWave(t[i], sWaveStart, 0.2, 0.02 * beatDuration) + // S wave\n            gaussianWave(t[i], tWaveStart, 0.3, 0.1 * beatDuration) // T wave\n        );\n\n        // Adjust for inverted P wave in AVRT\n        if (arrhythmias[arrhythmiaType].Ppositive === false && arrhythmias[arrhythmiaType].Pwave) {\n            ekgBeat = ekgBeat.map((y, i) => \n                y - gaussianWave(t[i], pWaveStart, 0.1, 0.05 * beatDuration) // Inverted P wave\n            );\n        }\n\n        // Add the EKG beat to the overall signal\n        for (let j = start; j < end && j < ekgSignal.length; j++) {\n            ekgSignal[j] += ekgBeat[j - start] + 0.05; // Add noise\n        }\n    }\n\n    // Trim the time and ekgSignal arrays to contain only the relevant data\n    const trimmedEnd = Math.ceil(numWaves * (60 / heartRate) * samplingRate);\n    return { t: t.slice(0, trimmedEnd), ekgSignal: ekgSignal.slice(0, trimmedEnd), wavePositions };\n}\n\nfunction EKGSimulator() {\n    const [chartData, setChartData] = useState(null);\n    const [showLabeledGraph, setShowLabeledGraph] = useState(false);\n    const [userDiagnosis, setUserDiagnosis] = useState(\"\");\n    const [userReasoning, setUserReasoning] = useState(\"\");\n    const [chosenEKGType, setChosenEKGType] = useState(\"\");\n    const [numPulses, setNumPulses] = useState(3); // Default to 3 pulses\n    const [wavePositions, setWavePositions] = useState([]);\n\n    const handleDiagnosisChange = (event) => {\n        setUserDiagnosis(event.target.value);\n    };\n\n    const handleReasoningChange = (event) => {\n        setUserReasoning(event.target.value); // Fixed this line\n    };\n\n    const handleNumPulsesChange = (event) => {\n        const value = parseInt(event.target.value);\n        if (value === 3 || value === 5) {\n            setNumPulses(value);\n        }\n    };\n\n    const checkDiagnosis = () => {\n        if (userDiagnosis.toLowerCase() === chosenEKGType.toLowerCase()) {\n            alert(\"Correct! Well done!\");\n            setShowLabeledGraph(false); // Hide the labeled graph if the answer is correct\n        } else {\n            alert(`Incorrect. The correct answer was '${chosenEKGType}'.`);\n            setShowLabeledGraph(true); // Show the labeled graph if the answer is incorrect\n        }\n    };\n\n    const simulateRandomEKG = () => {\n        const arrhythmiaTypes = Object.keys(arrhythmias);\n        const randomType = arrhythmiaTypes[Math.floor(Math.random() * arrhythmiaTypes.length)];\n        setChosenEKGType(randomType); // Set the chosen EKG type\n        const { t, ekgSignal, wavePositions: generatedWavePositions } = generateEKG(5, randomType, 1000, numPulses);\n        setWavePositions(generatedWavePositions);\n        setChartData({\n            labels: t,\n            datasets: [\n                {\n                    label: 'EKG Signal',\n                    data: ekgSignal,\n                    fill: false,\n                    borderColor: 'rgba(75, 192, 192, 1)',\n                    tension: 0.1,\n                },\n            ],\n        });\n    };\n\n    // Use useEffect to generate a random EKG when the component mounts\n    useEffect(() => {\n        simulateRandomEKG();\n    }, []);\n\n    return (\n        <div className=\"ekg-simulator\">\n            <h1>EKG Simulator</h1>\n            <div className=\"diagnosis-section\">\n                <input\n                    type=\"text\"\n                    value={userDiagnosis}\n                    onChange={handleDiagnosisChange}\n                    placeholder=\"Enter your diagnosis\"\n                />\n                <textarea\n                    value={userReasoning}\n                    onChange={handleReasoningChange}\n                    placeholder=\"Enter your reasoning\"\n                />\n                <button onClick={checkDiagnosis}>Submit Diagnosis</button>\n            </div>\n\n            <div className=\"ekg-chart\">\n                {chartData && <Line data={chartData} options={{ responsive: true }} />}\n            </div>\n\n            {showLabeledGraph && (\n                <div className=\"labeled-graph\">\n                    <h2>Correct EKG: {chosenEKGType}</h2>\n                    <Line\n                        data={{\n                            labels: chartData.labels,\n                            datasets: [\n                                {\n                                    label: 'Labeled EKG Signal',\n                                    data: chartData.datasets[0].data,\n                                    fill: false,\n                                    borderColor: 'red',\n                                    tension: 0.1,\n                                },\n                            ],\n                        }}\n                        options={{ responsive: true }}\n                    />\n                    <p>{arrhythmias[chosenEKGType].description}</p>\n                </div>\n            )}\n\n            <div className=\"footer\">\n                <input\n                    type=\"number\"\n                    value={numPulses}\n                    onChange={handleNumPulsesChange}\n                    min=\"1\"\n                    max=\"5\"\n                />\n                <p>Number of Pulses: {numPulses}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default EKGSimulator;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,iBAAiB;AACtC,OAAOC,KAAK,MAAM,eAAe;AACjC,OAAO,WAAW,CAAC,CAAC;;AAEpB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,GAAG;EAChB,mBAAmB,EAAE;IACjBC,SAAS,EAAE,GAAG;IACdC,KAAK,EAAE,IAAI;IACXC,GAAG,EAAE,IAAI;IAAE;IACXC,SAAS,EAAE,KAAK;IAAE;IAClBC,SAAS,EAAE,IAAI;IAAE;IACjBC,WAAW,EAAE;EACjB,CAAC;EACD,eAAe,EAAE;IACbL,SAAS,EAAE,GAAG;IACdC,KAAK,EAAE,KAAK;IACfC,GAAG,EAAE,KAAK;IACPC,SAAS,EAAE,KAAK;IAChBE,WAAW,EAAE;EACjB,CAAC;EACD,MAAM,EAAE;IACJL,SAAS,EAAE,GAAG;IACdC,KAAK,EAAE,IAAI;IACdC,GAAG,EAAE,IAAI;IACNC,SAAS,EAAE,IAAI;IACfC,SAAS,EAAE,KAAK;IAAE;IAClBC,WAAW,EAAE;EACjB,CAAC;EACD,OAAO,EAAE;IACLL,SAAS,EAAE,GAAG;IACdC,KAAK,EAAE,KAAK;IACZC,GAAG,EAAE,IAAI;IAAE;IACXC,SAAS,EAAE,KAAK;IAChBE,WAAW,EAAE;EACjB;AACJ,CAAC;;AAED;AACA,SAASC,WAAWA,CAACC,QAAQ,GAAG,CAAC,EAAEC,cAAc,EAAEC,YAAY,GAAG,IAAI,EAAEC,QAAQ,GAAG,CAAC,EAAE;EAClF,MAAMC,UAAU,GAAGJ,QAAQ,GAAGE,YAAY,CAAC,CAAC;EAC5C,MAAMG,CAAC,GAAGC,KAAK,CAACC,IAAI,CAAC;IAAEC,MAAM,EAAEJ;EAAW,CAAC,EAAE,CAACK,CAAC,EAAEC,CAAC,KAAKA,CAAC,GAAGR,YAAY,CAAC,CAAC,CAAC;EAC1E,IAAIS,SAAS,GAAGL,KAAK,CAACD,CAAC,CAACG,MAAM,CAAC,CAACI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EACzC,MAAMnB,SAAS,GAAGD,WAAW,CAACS,cAAc,CAAC,CAACR,SAAS,CAAC,CAAC;EACzD,MAAMoB,YAAY,GAAG,EAAE,GAAGpB,SAAS,CAAC,CAAC;;EAErC;EACA,SAASqB,YAAYA,CAACC,CAAC,EAAEC,IAAI,EAAEC,SAAS,EAAEC,KAAK,EAAE;IAC7C,OAAOD,SAAS,GAAGE,IAAI,CAACC,GAAG,CAAC,EAAE,CAACL,CAAC,GAAGC,IAAI,KAAK,CAAC,CAAC,IAAI,CAAC,GAAGE,KAAK,IAAI,CAAC,CAAC,CAAC;EACtE;;EAEA;EACA,MAAMG,aAAa,GAAG,EAAE,CAAC,CAAC;EAC1B,KAAK,IAAIX,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,QAAQ,EAAEO,CAAC,EAAE,EAAE;IAC/B,IAAIY,KAAK,GAAGH,IAAI,CAACI,KAAK,CAACb,CAAC,IAAI,EAAE,GAAGjB,SAAS,CAAC,GAAGS,YAAY,CAAC;IAC3D,IAAIsB,GAAG,GAAGF,KAAK,GAAGH,IAAI,CAACI,KAAK,CAAE,EAAE,GAAG9B,SAAS,GAAIS,YAAY,CAAC;IAC7D,IAAIuB,OAAO,GAAGnB,KAAK,CAACD,CAAC,CAACG,MAAM,CAAC,CAACI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;;IAEvC;IACA,MAAMc,UAAU,GAAGlC,WAAW,CAACS,cAAc,CAAC,CAACP,KAAK,GAAG,GAAG,GAAGmB,YAAY,GAAG,IAAI,CAAC,CAAC;IAClF,MAAMc,UAAU,GAAG,GAAG,GAAGd,YAAY,CAAC,CAAC;IACvC,MAAMe,UAAU,GAAG,IAAI,GAAGf,YAAY,CAAC,CAAC;IACxC,MAAMgB,UAAU,GAAG,GAAG,GAAGhB,YAAY,CAAC,CAAC;IACvC,MAAMiB,UAAU,GAAG,GAAG,GAAGjB,YAAY,CAAC,CAAC;;IAEvC;IACA,IAAIa,UAAU,KAAK,IAAI,EAAEL,aAAa,CAACU,IAAI,CAAC;MAAEC,IAAI,EAAE,GAAG;MAAEV,KAAK,EAAEA,KAAK,GAAGH,IAAI,CAACI,KAAK,CAACG,UAAU,GAAGxB,YAAY,CAAC;MAAEsB,GAAG,EAAEF,KAAK,GAAGH,IAAI,CAACI,KAAK,CAAC,CAACG,UAAU,GAAG,GAAG,GAAGb,YAAY,IAAIX,YAAY;IAAE,CAAC,CAAC;IAC3LmB,aAAa,CAACU,IAAI,CAAC;MAAEC,IAAI,EAAE,GAAG;MAAEV,KAAK,EAAEA,KAAK,GAAGH,IAAI,CAACI,KAAK,CAACI,UAAU,GAAGzB,YAAY,CAAC;MAAEsB,GAAG,EAAEF,KAAK,GAAGH,IAAI,CAACI,KAAK,CAAC,CAACI,UAAU,GAAG,GAAG,GAAGd,YAAY,IAAIX,YAAY;IAAE,CAAC,CAAC;IAClKmB,aAAa,CAACU,IAAI,CAAC;MAAEC,IAAI,EAAE,GAAG;MAAEV,KAAK,EAAEA,KAAK,GAAGH,IAAI,CAACI,KAAK,CAACK,UAAU,GAAG1B,YAAY,CAAC;MAAEsB,GAAG,EAAEF,KAAK,GAAGH,IAAI,CAACI,KAAK,CAAC,CAACK,UAAU,GAAG,GAAG,GAAGf,YAAY,IAAIX,YAAY;IAAE,CAAC,CAAC;IAClKmB,aAAa,CAACU,IAAI,CAAC;MAAEC,IAAI,EAAE,GAAG;MAAEV,KAAK,EAAEA,KAAK,GAAGH,IAAI,CAACI,KAAK,CAACM,UAAU,GAAG3B,YAAY,CAAC;MAAEsB,GAAG,EAAEF,KAAK,GAAGH,IAAI,CAACI,KAAK,CAAC,CAACM,UAAU,GAAG,GAAG,GAAGhB,YAAY,IAAIX,YAAY;IAAE,CAAC,CAAC;IAClKmB,aAAa,CAACU,IAAI,CAAC;MAAEC,IAAI,EAAE,GAAG;MAAEV,KAAK,EAAEA,KAAK,GAAGH,IAAI,CAACI,KAAK,CAACO,UAAU,GAAG5B,YAAY,CAAC;MAAEsB,GAAG,EAAEF,KAAK,GAAGH,IAAI,CAACI,KAAK,CAAC,CAACO,UAAU,GAAG,GAAG,GAAGjB,YAAY,IAAIX,YAAY;IAAE,CAAC,CAAC;;IAElK;IACA,MAAM+B,cAAc,GAAGzC,WAAW,CAACS,cAAc,CAAC,CAACL,SAAS;;IAE5D;IACA,IAAI8B,UAAU,KAAK,IAAI,EAAE;MACrB,IAAIO,cAAc,EAAE;QAChBR,OAAO,GAAGA,OAAO,CAACS,GAAG,CAAC,CAACC,CAAC,EAAEzB,CAAC,KACvByB,CAAC,GAAGrB,YAAY,CAACT,CAAC,CAACK,CAAC,CAAC,EAAEkB,UAAU,GAAG,GAAG,GAAGf,YAAY,EAAE,GAAG,EAAE,IAAI,GAAGA,YAAY,CACpF,CAAC;MACL,CAAC,MAAM;QACHY,OAAO,GAAGA,OAAO,CAACS,GAAG,CAAC,CAACC,CAAC,EAAEzB,CAAC,KACvByB,CAAC,GAAGrB,YAAY,CAACT,CAAC,CAACK,CAAC,CAAC,EAAEgB,UAAU,EAAE,GAAG,EAAE,IAAI,GAAGb,YAAY,CAC/D,CAAC;MACL;IACJ;;IAEA;IACAY,OAAO,GAAGA,OAAO,CAACS,GAAG,CAAC,CAACC,CAAC,EAAEzB,CAAC,KACvByB,CAAC,GACDrB,YAAY,CAACT,CAAC,CAACK,CAAC,CAAC,EAAEiB,UAAU,EAAE,IAAI,EAAE,IAAI,GAAGd,YAAY,CAAC;IAAG;IAC5DC,YAAY,CAACT,CAAC,CAACK,CAAC,CAAC,EAAEkB,UAAU,EAAE,GAAG,EAAE,IAAI,GAAGf,YAAY,CAAC;IAAG;IAC3DC,YAAY,CAACT,CAAC,CAACK,CAAC,CAAC,EAAEmB,UAAU,EAAE,GAAG,EAAE,IAAI,GAAGhB,YAAY,CAAC;IAAG;IAC3DC,YAAY,CAACT,CAAC,CAACK,CAAC,CAAC,EAAEoB,UAAU,EAAE,GAAG,EAAE,GAAG,GAAGjB,YAAY,CAAC,CAAC;IAC5D,CAAC;;IAED;IACA,IAAIrB,WAAW,CAACS,cAAc,CAAC,CAACJ,SAAS,KAAK,KAAK,IAAIL,WAAW,CAACS,cAAc,CAAC,CAACP,KAAK,EAAE;MACtF+B,OAAO,GAAGA,OAAO,CAACS,GAAG,CAAC,CAACC,CAAC,EAAEzB,CAAC,KACvByB,CAAC,GAAGrB,YAAY,CAACT,CAAC,CAACK,CAAC,CAAC,EAAEgB,UAAU,EAAE,GAAG,EAAE,IAAI,GAAGb,YAAY,CAAC,CAAC;MACjE,CAAC;IACL;;IAEA;IACA,KAAK,IAAIuB,CAAC,GAAGd,KAAK,EAAEc,CAAC,GAAGZ,GAAG,IAAIY,CAAC,GAAGzB,SAAS,CAACH,MAAM,EAAE4B,CAAC,EAAE,EAAE;MACtDzB,SAAS,CAACyB,CAAC,CAAC,IAAIX,OAAO,CAACW,CAAC,GAAGd,KAAK,CAAC,GAAG,IAAI,CAAC,CAAC;IAC/C;EACJ;;EAEA;EACA,MAAMe,UAAU,GAAGlB,IAAI,CAACmB,IAAI,CAACnC,QAAQ,IAAI,EAAE,GAAGV,SAAS,CAAC,GAAGS,YAAY,CAAC;EACxE,OAAO;IAAEG,CAAC,EAAEA,CAAC,CAACkC,KAAK,CAAC,CAAC,EAAEF,UAAU,CAAC;IAAE1B,SAAS,EAAEA,SAAS,CAAC4B,KAAK,CAAC,CAAC,EAAEF,UAAU,CAAC;IAAEhB;EAAc,CAAC;AAClG;AAEA,SAASmB,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGzD,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAAC0D,gBAAgB,EAAEC,mBAAmB,CAAC,GAAG3D,QAAQ,CAAC,KAAK,CAAC;EAC/D,MAAM,CAAC4D,aAAa,EAAEC,gBAAgB,CAAC,GAAG7D,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAAC8D,aAAa,EAAEC,gBAAgB,CAAC,GAAG/D,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACgE,aAAa,EAAEC,gBAAgB,CAAC,GAAGjE,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACkE,SAAS,EAAEC,YAAY,CAAC,GAAGnE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACmC,aAAa,EAAEiC,gBAAgB,CAAC,GAAGpE,QAAQ,CAAC,EAAE,CAAC;EAEtD,MAAMqE,qBAAqB,GAAIC,KAAK,IAAK;IACrCT,gBAAgB,CAACS,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACxC,CAAC;EAED,MAAMC,qBAAqB,GAAIH,KAAK,IAAK;IACrCP,gBAAgB,CAACO,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;EAC1C,CAAC;EAED,MAAME,qBAAqB,GAAIJ,KAAK,IAAK;IACrC,MAAME,KAAK,GAAGG,QAAQ,CAACL,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;IAC1C,IAAIA,KAAK,KAAK,CAAC,IAAIA,KAAK,KAAK,CAAC,EAAE;MAC5BL,YAAY,CAACK,KAAK,CAAC;IACvB;EACJ,CAAC;EAED,MAAMI,cAAc,GAAGA,CAAA,KAAM;IACzB,IAAIhB,aAAa,CAACiB,WAAW,CAAC,CAAC,KAAKb,aAAa,CAACa,WAAW,CAAC,CAAC,EAAE;MAC7DC,KAAK,CAAC,qBAAqB,CAAC;MAC5BnB,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAAC;IAChC,CAAC,MAAM;MACHmB,KAAK,CAAC,sCAAsCd,aAAa,IAAI,CAAC;MAC9DL,mBAAmB,CAAC,IAAI,CAAC,CAAC,CAAC;IAC/B;EACJ,CAAC;EAED,MAAMoB,iBAAiB,GAAGA,CAAA,KAAM;IAC5B,MAAMC,eAAe,GAAGC,MAAM,CAACC,IAAI,CAAC5E,WAAW,CAAC;IAChD,MAAM6E,UAAU,GAAGH,eAAe,CAAC/C,IAAI,CAACI,KAAK,CAACJ,IAAI,CAACmD,MAAM,CAAC,CAAC,GAAGJ,eAAe,CAAC1D,MAAM,CAAC,CAAC;IACtF2C,gBAAgB,CAACkB,UAAU,CAAC,CAAC,CAAC;IAC9B,MAAM;MAAEhE,CAAC;MAAEM,SAAS;MAAEU,aAAa,EAAEkD;IAAuB,CAAC,GAAGxE,WAAW,CAAC,CAAC,EAAEsE,UAAU,EAAE,IAAI,EAAEjB,SAAS,CAAC;IAC3GE,gBAAgB,CAACiB,sBAAsB,CAAC;IACxC5B,YAAY,CAAC;MACT6B,MAAM,EAAEnE,CAAC;MACToE,QAAQ,EAAE,CACN;QACIC,KAAK,EAAE,YAAY;QACnBC,IAAI,EAAEhE,SAAS;QACfC,IAAI,EAAE,KAAK;QACXgE,WAAW,EAAE,uBAAuB;QACpCC,OAAO,EAAE;MACb,CAAC;IAET,CAAC,CAAC;EACN,CAAC;;EAED;EACA1F,SAAS,CAAC,MAAM;IACZ8E,iBAAiB,CAAC,CAAC;EACvB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACI1E,OAAA;IAAKuF,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAC1BxF,OAAA;MAAAwF,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtB5F,OAAA;MAAKuF,SAAS,EAAC,mBAAmB;MAAAC,QAAA,gBAC9BxF,OAAA;QACIyC,IAAI,EAAC,MAAM;QACX0B,KAAK,EAAEZ,aAAc;QACrBsC,QAAQ,EAAE7B,qBAAsB;QAChC8B,WAAW,EAAC;MAAsB;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrC,CAAC,eACF5F,OAAA;QACImE,KAAK,EAAEV,aAAc;QACrBoC,QAAQ,EAAEzB,qBAAsB;QAChC0B,WAAW,EAAC;MAAsB;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrC,CAAC,eACF5F,OAAA;QAAQ+F,OAAO,EAAExB,cAAe;QAAAiB,QAAA,EAAC;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzD,CAAC,eAEN5F,OAAA;MAAKuF,SAAS,EAAC,WAAW;MAAAC,QAAA,EACrBrC,SAAS,iBAAInD,OAAA,CAACH,IAAI;QAACuF,IAAI,EAAEjC,SAAU;QAAC6C,OAAO,EAAE;UAAEC,UAAU,EAAE;QAAK;MAAE;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrE,CAAC,EAELvC,gBAAgB,iBACbrD,OAAA;MAAKuF,SAAS,EAAC,eAAe;MAAAC,QAAA,gBAC1BxF,OAAA;QAAAwF,QAAA,GAAI,eAAa,EAAC7B,aAAa;MAAA;QAAA8B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACrC5F,OAAA,CAACH,IAAI;QACDuF,IAAI,EAAE;UACFH,MAAM,EAAE9B,SAAS,CAAC8B,MAAM;UACxBC,QAAQ,EAAE,CACN;YACIC,KAAK,EAAE,oBAAoB;YAC3BC,IAAI,EAAEjC,SAAS,CAAC+B,QAAQ,CAAC,CAAC,CAAC,CAACE,IAAI;YAChC/D,IAAI,EAAE,KAAK;YACXgE,WAAW,EAAE,KAAK;YAClBC,OAAO,EAAE;UACb,CAAC;QAET,CAAE;QACFU,OAAO,EAAE;UAAEC,UAAU,EAAE;QAAK;MAAE;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjC,CAAC,eACF5F,OAAA;QAAAwF,QAAA,EAAIvF,WAAW,CAAC0D,aAAa,CAAC,CAACpD;MAAW;QAAAkF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9C,CACR,eAED5F,OAAA;MAAKuF,SAAS,EAAC,QAAQ;MAAAC,QAAA,gBACnBxF,OAAA;QACIyC,IAAI,EAAC,QAAQ;QACb0B,KAAK,EAAEN,SAAU;QACjBgC,QAAQ,EAAExB,qBAAsB;QAChC6B,GAAG,EAAC,GAAG;QACPC,GAAG,EAAC;MAAG;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACV,CAAC,eACF5F,OAAA;QAAAwF,QAAA,GAAG,oBAAkB,EAAC3B,SAAS;MAAA;QAAA4B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAAC1C,EAAA,CAnHQD,YAAY;AAAAmD,EAAA,GAAZnD,YAAY;AAqHrB,eAAeA,YAAY;AAAC,IAAAmD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}