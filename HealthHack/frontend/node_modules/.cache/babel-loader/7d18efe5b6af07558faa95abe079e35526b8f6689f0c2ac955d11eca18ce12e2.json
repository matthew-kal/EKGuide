{"ast":null,"code":"var _jsxFileName = \"/Users/matthewkalender/Desktop/HealthHack/ekg-simulator/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport Chart from \"chart.js/auto\";\nimport \"./App.css\";\n\n// EKG Simulation Helper Functions in JavaScript\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction gaussianWave(x, mean, amplitude, width) {\n  return amplitude * Math.exp(-((x - mean) ** 2) / (2 * width ** 2));\n}\nfunction ekgWaveform(t, heartRate = 60, pWave = true, constantRR = true, retrogradeP = false) {\n  const beatDuration = 60 / heartRate;\n  let ekgBeat = Array(t.length).fill(0);\n  const peaks = {};\n\n  // Define wave positions\n  const pWaveStart = pWave ? 0.2 * beatDuration : null;\n  const qWaveStart = 0.4 * beatDuration;\n  const rWaveStart = 0.45 * beatDuration;\n  const sWaveStart = 0.5 * beatDuration;\n  const tWaveStart = 0.7 * beatDuration;\n\n  // Generate P wave with inversion if retrogradeP is true\n  if (pWaveStart !== null) {\n    const pAmplitude = retrogradeP ? -0.1 : 0.1; // Adjusted to match Python logic\n    ekgBeat = ekgBeat.map((y, i) => y + gaussianWave(t[i], pWaveStart, pAmplitude, 0.05 * beatDuration));\n    peaks.P = pWaveStart;\n  }\n\n  // Generate QRS complex and T wave\n  ekgBeat = ekgBeat.map((y, i) => y - gaussianWave(t[i], qWaveStart, 0.15, 0.02 * beatDuration) + gaussianWave(t[i], rWaveStart, 1.0, 0.01 * beatDuration) - gaussianWave(t[i], sWaveStart, 0.2, 0.02 * beatDuration) + gaussianWave(t[i], tWaveStart, 0.3, 0.1 * beatDuration));\n\n  // Adjust beat duration if `constantRR` is false\n  if (!constantRR) {\n    const randomFactor = Math.random() * 0.4 + 0.8; // Random between 0.8 and 1.2\n    beatDuration *= randomFactor;\n  }\n\n  // Retrograde P waves\n  if (retrogradeP) {\n    const retrogradePosition = rWaveStart - 0.15 * beatDuration;\n    ekgBeat = ekgBeat.map((y, i) => y + gaussianWave(t[i], retrogradePosition, -0.1, 0.05 * beatDuration));\n    peaks.P = retrogradePosition; // Update peaks dictionary for visualization\n  }\n\n  // Return peaks\n  peaks.Q = qWaveStart;\n  peaks.R = rWaveStart;\n  peaks.S = sWaveStart;\n  peaks.T = tWaveStart;\n  return {\n    ekgBeat,\n    peaks\n  };\n}\nfunction generateEKG(duration = 5, heartRate = 72, samplingRate = 1000, params = {}) {\n  const numSamples = duration * samplingRate;\n  const t = Array.from({\n    length: numSamples\n  }, (_, i) => i / samplingRate);\n  let ekgSignal = Array(t.length).fill(0);\n  const peaksList = [];\n  for (let i = 0; i < Math.floor(duration * heartRate / 60); i++) {\n    const start = Math.floor(i * 60 / heartRate * samplingRate);\n    const end = start + Math.floor(60 / heartRate * samplingRate);\n    const {\n      ekgBeat,\n      peaks\n    } = ekgWaveform(t.slice(0, end - start), heartRate, params.pWave, params.constantRR, params.retrogradeP);\n\n    // Combine beats\n    for (let j = start; j < end && j < ekgSignal.length; j++) {\n      ekgSignal[j] = ekgBeat[j - start];\n    }\n    for (let [peak, time] of Object.entries(peaks)) {\n      if (time !== null) {\n        peaksList.push({\n          peak,\n          time: t[start] + time\n        });\n      }\n    }\n  }\n  return {\n    t,\n    ekgSignal,\n    peaksList\n  };\n}\n\n// Arrhythmias data structure\nconst arrhythmias = {\n  \"Sinus Tachycardia\": {\n    heartRate: 100,\n    pWave: true,\n    constantRR: true,\n    description: \"Sinus tachycardia is characterized by a regular rhythm with a P wave preceding every QRS complex. The heart rate is typically above 100 bpm.\"\n  },\n  \"Afib with RVR\": {\n    heartRate: 150,\n    pWave: false,\n    constantRR: false,\n    description: \"Atrial fibrillation with rapid ventricular response lacks distinct P waves, and the R-R interval varies irregularly due to uncoordinated atrial activity.\"\n  },\n  \"AVRT\": {\n    heartRate: 220,\n    retrogradeP: true,\n    constantRR: false,\n    description: \"AVRT shows a very fast ventricular rate (200-300 bpm), with retrograde P waves and some variability in R wave amplitude.\"\n  },\n  \"AVNRT\": {\n    heartRate: 180,\n    retrogradeP: true,\n    pWave: false,\n    constantRR: true,\n    description: \"AVNRT has a fast rate, with a short PR interval and often overlapping P and QRS waves.\"\n  }\n};\nfunction EKGSimulator() {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  const [userDiagnosis, setUserDiagnosis] = useState(\"\");\n  const [chosenEKGType, setChosenEKGType] = useState(\"\");\n  const handleDiagnosisChange = event => {\n    setUserDiagnosis(event.target.value);\n  };\n  const checkDiagnosis = () => {\n    if (userDiagnosis.toLowerCase() === chosenEKGType.toLowerCase()) {\n      alert(\"Correct! Well done!\");\n    } else {\n      alert(`Incorrect. The correct answer was '${chosenEKGType}'.`);\n    }\n  };\n  const simulateRandomEKG = () => {\n    const arrhythmiaTypes = Object.keys(arrhythmias);\n    const randomType = arrhythmiaTypes[Math.floor(Math.random() * arrhythmiaTypes.length)];\n    setChosenEKGType(randomType);\n    const {\n      heartRate,\n      ...params\n    } = arrhythmias[randomType];\n    const {\n      t,\n      ekgSignal\n    } = generateEKG(5, heartRate, 1000, params);\n    setChartData({\n      labels: t,\n      datasets: [{\n        label: \"EKG Signal\",\n        data: ekgSignal,\n        borderColor: \"blue\",\n        fill: false\n      }]\n    });\n  };\n  useEffect(() => {\n    simulateRandomEKG();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"EKG Simulator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userDiagnosis,\n        onChange: handleDiagnosisChange,\n        placeholder: \"Enter your diagnosis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: checkDiagnosis,\n        children: \"Submit Diagnosis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: simulateRandomEKG,\n        children: \"Next EKG\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this), chartData && /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 9\n  }, this);\n}\n_s(EKGSimulator, \"dmSDVEW4+hkaqoAW5IMqRlxxLP0=\");\n_c = EKGSimulator;\nexport default EKGSimulator;\nvar _c;\n$RefreshReg$(_c, \"EKGSimulator\");","map":{"version":3,"names":["React","useState","useEffect","Line","Chart","jsxDEV","_jsxDEV","gaussianWave","x","mean","amplitude","width","Math","exp","ekgWaveform","t","heartRate","pWave","constantRR","retrogradeP","beatDuration","ekgBeat","Array","length","fill","peaks","pWaveStart","qWaveStart","rWaveStart","sWaveStart","tWaveStart","pAmplitude","map","y","i","P","randomFactor","random","retrogradePosition","Q","R","S","T","generateEKG","duration","samplingRate","params","numSamples","from","_","ekgSignal","peaksList","floor","start","end","slice","j","peak","time","Object","entries","push","arrhythmias","description","EKGSimulator","_s","chartData","setChartData","userDiagnosis","setUserDiagnosis","chosenEKGType","setChosenEKGType","handleDiagnosisChange","event","target","value","checkDiagnosis","toLowerCase","alert","simulateRandomEKG","arrhythmiaTypes","keys","randomType","labels","datasets","label","data","borderColor","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/matthewkalender/Desktop/HealthHack/ekg-simulator/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport Chart from \"chart.js/auto\";\nimport \"./App.css\";\n\n// EKG Simulation Helper Functions in JavaScript\n\nfunction gaussianWave(x, mean, amplitude, width) {\n    return amplitude * Math.exp(-((x - mean) ** 2) / (2 * width ** 2));\n}\n\nfunction ekgWaveform(t, heartRate = 60, pWave = true, constantRR = true, retrogradeP = false) {\n    const beatDuration = 60 / heartRate;\n    let ekgBeat = Array(t.length).fill(0);\n    const peaks = {};\n\n    // Define wave positions\n    const pWaveStart = pWave ? 0.2 * beatDuration : null;\n    const qWaveStart = 0.4 * beatDuration;\n    const rWaveStart = 0.45 * beatDuration;\n    const sWaveStart = 0.5 * beatDuration;\n    const tWaveStart = 0.7 * beatDuration;\n\n    // Generate P wave with inversion if retrogradeP is true\n    if (pWaveStart !== null) {\n        const pAmplitude = retrogradeP ? -0.1 : 0.1; // Adjusted to match Python logic\n        ekgBeat = ekgBeat.map((y, i) => y + gaussianWave(t[i], pWaveStart, pAmplitude, 0.05 * beatDuration));\n        peaks.P = pWaveStart;\n    }\n\n    // Generate QRS complex and T wave\n    ekgBeat = ekgBeat.map((y, i) =>\n        y -\n        gaussianWave(t[i], qWaveStart, 0.15, 0.02 * beatDuration) +\n        gaussianWave(t[i], rWaveStart, 1.0, 0.01 * beatDuration) -\n        gaussianWave(t[i], sWaveStart, 0.2, 0.02 * beatDuration) +\n        gaussianWave(t[i], tWaveStart, 0.3, 0.1 * beatDuration)\n    );\n\n    // Adjust beat duration if `constantRR` is false\n    if (!constantRR) {\n        const randomFactor = Math.random() * 0.4 + 0.8; // Random between 0.8 and 1.2\n        beatDuration *= randomFactor;\n    }\n\n    // Retrograde P waves\n    if (retrogradeP) {\n        const retrogradePosition = rWaveStart - 0.15 * beatDuration;\n        ekgBeat = ekgBeat.map((y, i) => y + gaussianWave(t[i], retrogradePosition, -0.1, 0.05 * beatDuration));\n        peaks.P = retrogradePosition; // Update peaks dictionary for visualization\n    }\n\n    // Return peaks\n    peaks.Q = qWaveStart;\n    peaks.R = rWaveStart;\n    peaks.S = sWaveStart;\n    peaks.T = tWaveStart;\n\n    return { ekgBeat, peaks };\n}\n\nfunction generateEKG(duration = 5, heartRate = 72, samplingRate = 1000, params = {}) {\n    const numSamples = duration * samplingRate;\n    const t = Array.from({ length: numSamples }, (_, i) => i / samplingRate);\n    let ekgSignal = Array(t.length).fill(0);\n    const peaksList = [];\n\n    for (let i = 0; i < Math.floor(duration * heartRate / 60); i++) {\n        const start = Math.floor(i * 60 / heartRate * samplingRate);\n        const end = start + Math.floor(60 / heartRate * samplingRate);\n        const { ekgBeat, peaks } = ekgWaveform(\n            t.slice(0, end - start),\n            heartRate,\n            params.pWave,\n            params.constantRR,\n            params.retrogradeP\n        );\n\n        // Combine beats\n        for (let j = start; j < end && j < ekgSignal.length; j++) {\n            ekgSignal[j] = ekgBeat[j - start];\n        }\n\n        for (let [peak, time] of Object.entries(peaks)) {\n            if (time !== null) {\n                peaksList.push({ peak, time: t[start] + time });\n            }\n        }\n    }\n\n    return { t, ekgSignal, peaksList };\n}\n\n// Arrhythmias data structure\nconst arrhythmias = {\n    \"Sinus Tachycardia\": { heartRate: 100, pWave: true, constantRR: true, description: \"Sinus tachycardia is characterized by a regular rhythm with a P wave preceding every QRS complex. The heart rate is typically above 100 bpm.\" },\n    \"Afib with RVR\": { heartRate: 150, pWave: false, constantRR: false, description: \"Atrial fibrillation with rapid ventricular response lacks distinct P waves, and the R-R interval varies irregularly due to uncoordinated atrial activity.\" },\n    \"AVRT\": { heartRate: 220, retrogradeP: true, constantRR: false, description: \"AVRT shows a very fast ventricular rate (200-300 bpm), with retrograde P waves and some variability in R wave amplitude.\" },\n    \"AVNRT\": { heartRate: 180, retrogradeP: true, pWave: false, constantRR: true, description: \"AVNRT has a fast rate, with a short PR interval and often overlapping P and QRS waves.\" }\n};\n\nfunction EKGSimulator() {\n    const [chartData, setChartData] = useState(null);\n    const [userDiagnosis, setUserDiagnosis] = useState(\"\");\n    const [chosenEKGType, setChosenEKGType] = useState(\"\");\n\n    const handleDiagnosisChange = (event) => {\n        setUserDiagnosis(event.target.value);\n    };\n\n    const checkDiagnosis = () => {\n        if (userDiagnosis.toLowerCase() === chosenEKGType.toLowerCase()) {\n            alert(\"Correct! Well done!\");\n        } else {\n            alert(`Incorrect. The correct answer was '${chosenEKGType}'.`);\n        }\n    };\n\n    const simulateRandomEKG = () => {\n        const arrhythmiaTypes = Object.keys(arrhythmias);\n        const randomType = arrhythmiaTypes[Math.floor(Math.random() * arrhythmiaTypes.length)];\n        setChosenEKGType(randomType);\n\n        const { heartRate, ...params } = arrhythmias[randomType];\n        const { t, ekgSignal } = generateEKG(5, heartRate, 1000, params);\n        setChartData({\n            labels: t,\n            datasets: [{\n                label: \"EKG Signal\",\n                data: ekgSignal,\n                borderColor: \"blue\",\n                fill: false\n            }]\n        });\n    };\n\n    useEffect(() => {\n        simulateRandomEKG();\n    }, []);\n\n    return (\n        <div className=\"App\">\n            <h1>EKG Simulator</h1>\n            <div>\n                <input\n                    type=\"text\"\n                    value={userDiagnosis}\n                    onChange={handleDiagnosisChange}\n                    placeholder=\"Enter your diagnosis\"\n                />\n                <button onClick={checkDiagnosis}>Submit Diagnosis</button>\n                <button onClick={simulateRandomEKG}>Next EKG</button>\n            </div>\n            {chartData && <Line data={chartData} />}\n        </div>\n    );\n}\n\nexport default EKGSimulator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}