{"ast":null,"code":"var _jsxFileName = \"/Users/matthewkalender/Desktop/HealthHack/ekg-simulator/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport Chart from \"chart.js/auto\";\nimport \"./App.css\"; // Ensure this file is created for styles\n\n// Arrhythmias data structure\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst arrhythmias = {\n  \"Sinus Tachycardia\": {\n    heartRate: 100,\n    Pwave: true,\n    RtR: true,\n    Placement: false,\n    Ppositive: true,\n    description: \"Regular rhythm with a P wave preceding every QRS complex.\"\n  },\n  \"Afib with RVR\": {\n    heartRate: 150,\n    Pwave: false,\n    Rtr: false,\n    Placement: false,\n    description: \"Lacks distinct P waves, has variable R-R intervals.\"\n  },\n  \"AVRT\": {\n    heartRate: 220,\n    Pwave: true,\n    Rtr: true,\n    Placement: true,\n    Ppositive: false,\n    description: \"Very fast rate (200-300 bpm), with retrograde P waves.\"\n  },\n  \"AVNRT\": {\n    heartRate: 180,\n    Pwave: false,\n    RtR: true,\n    Placement: false,\n    description: \"Fast rate, with retrograde P waves possibly overlaying the QRS.\"\n  }\n};\n\n// Placeholder for generateEKG function (replace with actual implementation if available)\nfunction generateEKG(duration, arrhythmiaType, samplingRate, numWaves) {\n  // Mocked response to simulate EKG signal data\n  const t = Array.from({\n    length: 1000\n  }, (_, i) => i / samplingRate);\n  const ekgSignal = t.map(() => Math.random() * 0.1); // Mock EKG data\n  const wavePositions = []; // No actual wave positions in this placeholder\n  return {\n    t,\n    ekgSignal,\n    wavePositions\n  };\n}\nfunction EKGSimulator() {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  const [showLabeledGraph, setShowLabeledGraph] = useState(false);\n  const [userDiagnosis, setUserDiagnosis] = useState(\"\");\n  const [userReasoning, setUserReasoning] = useState(\"\");\n  const [chosenEKGType, setChosenEKGType] = useState(\"\");\n  const [numPulses, setNumPulses] = useState(3);\n  const [wavePositions, setWavePositions] = useState([]);\n  const [analysis, setAnalysis] = useState(null);\n  const handleDiagnosisChange = event => setUserDiagnosis(event.target.value);\n  const handleReasoningChange = event => setUserReasoning(event.target.value);\n  const handleNumPulsesChange = event => {\n    const value = parseInt(event.target.value);\n    if (value === 3 || value === 5) setNumPulses(value);\n  };\n  const checkDiagnosis = async () => {\n    try {\n      const response = await fetch(\"http://localhost:8000/analyze-response\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          user_answer: userDiagnosis,\n          correct_answer: chosenEKGType,\n          user_explanation: userReasoning,\n          ekg_attributes: arrhythmias[chosenEKGType].description\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch analysis\");\n      }\n      const data = await response.json();\n      setAnalysis(data.feedback);\n    } catch (error) {\n      console.error(\"Error fetching analysis:\", error);\n    }\n  };\n  const simulateRandomEKG = () => {\n    const arrhythmiaTypes = Object.keys(arrhythmias);\n    const randomType = arrhythmiaTypes[Math.floor(Math.random() * arrhythmiaTypes.length)];\n    setChosenEKGType(randomType);\n    const {\n      t,\n      ekgSignal,\n      wavePositions\n    } = generateEKG(5, randomType, 1000, numPulses);\n    setWavePositions(wavePositions);\n    const data = {\n      labels: t,\n      datasets: [{\n        label: `EKG Signal Below:`,\n        data: ekgSignal,\n        borderColor: \"black\",\n        pointRadius: 0,\n        showLine: true,\n        fill: false\n      }]\n    };\n    setChartData(data);\n    setUserDiagnosis(\"\");\n    setUserReasoning(\"\");\n    setAnalysis(null);\n  };\n  useEffect(() => {\n    simulateRandomEKG();\n  }, [numPulses]);\n  const chartOptions = {\n    scales: {\n      y: {\n        beginAtZero: true\n      },\n      x: {\n        ticks: {\n          callback: value => value.toFixed(2)\n        }\n      }\n    },\n    plugins: {\n      annotation: {\n        annotations: {}\n      }\n    }\n  };\n  if (chartData) {\n    wavePositions.forEach(({\n      type,\n      start,\n      end\n    }) => {\n      const color = type === 'P' ? 'rgba(255, 223, 186, 0.5)' : type === 'T' ? 'rgba(186, 255, 233, 0.5)' : 'rgba(255, 186, 186, 0.5)';\n      chartOptions.plugins.annotation.annotations[`highlight${type}`] = {\n        type: 'box',\n        xMin: start / 1000,\n        xMax: end / 1000,\n        yMin: -1,\n        yMax: 1,\n        backgroundColor: color,\n        borderWidth: 0\n      };\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"EKG Simulator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: chartData && /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData,\n        options: {\n          responsive: true\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 31\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"input-field\",\n        value: userDiagnosis,\n        onChange: handleDiagnosisChange,\n        placeholder: \"Enter your diagnosis...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"input-field\",\n        value: userReasoning,\n        onChange: handleReasoningChange,\n        placeholder: \"Enter your reasoning...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button\",\n        onClick: checkDiagnosis,\n        children: \"Check your diagnosis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }, this), analysis && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"analysis\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Analysis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: analysis\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"time-dropdown\",\n        children: \"Select Time Duration:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"time-dropdown\",\n        value: numPulses,\n        onChange: handleNumPulsesChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: 3,\n          children: \"3 seconds\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: 5,\n          children: \"5 seconds\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button\",\n        onClick: simulateRandomEKG,\n        children: \"Generate New EKG\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 9\n  }, this);\n}\n_s(EKGSimulator, \"Jyw/hl+FFPRy+Q5eI/dCcyrjGSw=\");\n_c = EKGSimulator;\nexport default EKGSimulator;\nvar _c;\n$RefreshReg$(_c, \"EKGSimulator\");","map":{"version":3,"names":["React","useState","useEffect","Line","Chart","jsxDEV","_jsxDEV","arrhythmias","heartRate","Pwave","RtR","Placement","Ppositive","description","Rtr","generateEKG","duration","arrhythmiaType","samplingRate","numWaves","t","Array","from","length","_","i","ekgSignal","map","Math","random","wavePositions","EKGSimulator","_s","chartData","setChartData","showLabeledGraph","setShowLabeledGraph","userDiagnosis","setUserDiagnosis","userReasoning","setUserReasoning","chosenEKGType","setChosenEKGType","numPulses","setNumPulses","setWavePositions","analysis","setAnalysis","handleDiagnosisChange","event","target","value","handleReasoningChange","handleNumPulsesChange","parseInt","checkDiagnosis","response","fetch","method","headers","body","JSON","stringify","user_answer","correct_answer","user_explanation","ekg_attributes","ok","Error","data","json","feedback","error","console","simulateRandomEKG","arrhythmiaTypes","Object","keys","randomType","floor","labels","datasets","label","borderColor","pointRadius","showLine","fill","chartOptions","scales","y","beginAtZero","x","ticks","callback","toFixed","plugins","annotation","annotations","forEach","type","start","end","color","xMin","xMax","yMin","yMax","backgroundColor","borderWidth","className","children","fileName","_jsxFileName","lineNumber","columnNumber","options","responsive","onChange","placeholder","onClick","htmlFor","id","_c","$RefreshReg$"],"sources":["/Users/matthewkalender/Desktop/HealthHack/ekg-simulator/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport Chart from \"chart.js/auto\";\nimport \"./App.css\"; // Ensure this file is created for styles\n\n// Arrhythmias data structure\nconst arrhythmias = {\n    \"Sinus Tachycardia\": { \n        heartRate: 100,\n        Pwave: true,\n        RtR: true,\n        Placement: false,\n        Ppositive: true,\n        description: \"Regular rhythm with a P wave preceding every QRS complex.\"\n    },\n    \"Afib with RVR\": {\n        heartRate: 150,\n        Pwave: false,\n        Rtr: false,\n        Placement: false,\n        description: \"Lacks distinct P waves, has variable R-R intervals.\"\n    },\n    \"AVRT\": {\n        heartRate: 220,\n        Pwave: true,\n        Rtr: true,\n        Placement: true,\n        Ppositive: false,\n        description: \"Very fast rate (200-300 bpm), with retrograde P waves.\"\n    },\n    \"AVNRT\": {\n        heartRate: 180,\n        Pwave: false,\n        RtR: true,\n        Placement: false,\n        description: \"Fast rate, with retrograde P waves possibly overlaying the QRS.\"\n    }\n};\n\n// Placeholder for generateEKG function (replace with actual implementation if available)\nfunction generateEKG(duration, arrhythmiaType, samplingRate, numWaves) {\n    // Mocked response to simulate EKG signal data\n    const t = Array.from({ length: 1000 }, (_, i) => i / samplingRate);\n    const ekgSignal = t.map(() => Math.random() * 0.1); // Mock EKG data\n    const wavePositions = []; // No actual wave positions in this placeholder\n    return { t, ekgSignal, wavePositions };\n}\n\nfunction EKGSimulator() {\n    const [chartData, setChartData] = useState(null);\n    const [showLabeledGraph, setShowLabeledGraph] = useState(false);\n    const [userDiagnosis, setUserDiagnosis] = useState(\"\");\n    const [userReasoning, setUserReasoning] = useState(\"\");\n    const [chosenEKGType, setChosenEKGType] = useState(\"\");\n    const [numPulses, setNumPulses] = useState(3);\n    const [wavePositions, setWavePositions] = useState([]);\n    const [analysis, setAnalysis] = useState(null);\n\n    const handleDiagnosisChange = (event) => setUserDiagnosis(event.target.value);\n    const handleReasoningChange = (event) => setUserReasoning(event.target.value);\n    const handleNumPulsesChange = (event) => {\n        const value = parseInt(event.target.value);\n        if (value === 3 || value === 5) setNumPulses(value);\n    };\n\n    const checkDiagnosis = async () => {\n        try {\n            const response = await fetch(\"http://localhost:8000/analyze-response\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    user_answer: userDiagnosis,\n                    correct_answer: chosenEKGType,\n                    user_explanation: userReasoning,\n                    ekg_attributes: arrhythmias[chosenEKGType].description\n                })\n            });\n\n            if (!response.ok) {\n                throw new Error(\"Failed to fetch analysis\");\n            }\n\n            const data = await response.json();\n            setAnalysis(data.feedback);\n        } catch (error) {\n            console.error(\"Error fetching analysis:\", error);\n        }\n    };\n\n    const simulateRandomEKG = () => {\n        const arrhythmiaTypes = Object.keys(arrhythmias);\n        const randomType = arrhythmiaTypes[Math.floor(Math.random() * arrhythmiaTypes.length)];\n        setChosenEKGType(randomType);\n\n        const { t, ekgSignal, wavePositions } = generateEKG(5, randomType, 1000, numPulses);\n        setWavePositions(wavePositions);\n\n        const data = {\n            labels: t,\n            datasets: [{\n                label: `EKG Signal Below:`,\n                data: ekgSignal,\n                borderColor: \"black\",\n                pointRadius: 0,\n                showLine: true,\n                fill: false\n            }]\n        };\n\n        setChartData(data);\n        setUserDiagnosis(\"\");\n        setUserReasoning(\"\");\n        setAnalysis(null);\n    };\n\n    useEffect(() => {\n        simulateRandomEKG();\n    }, [numPulses]);\n\n    const chartOptions = {\n        scales: {\n            y: { beginAtZero: true },\n            x: {\n                ticks: { callback: (value) => value.toFixed(2) }\n            },\n        },\n        plugins: { annotation: { annotations: {} } }\n    };\n\n    if (chartData) {\n        wavePositions.forEach(({ type, start, end }) => {\n            const color = type === 'P' ? 'rgba(255, 223, 186, 0.5)' : type === 'T' ? 'rgba(186, 255, 233, 0.5)' : 'rgba(255, 186, 186, 0.5)';\n            chartOptions.plugins.annotation.annotations[`highlight${type}`] = {\n                type: 'box',\n                xMin: start / 1000,\n                xMax: end / 1000,\n                yMin: -1,\n                yMax: 1,\n                backgroundColor: color,\n                borderWidth: 0,\n            };\n        });\n    }\n\n    return (\n        <div className=\"App\">\n            <h1>EKG Simulator</h1>\n\n            <div className=\"chart-container\">\n                {chartData && <Line data={chartData} options={{ responsive: true }} />}\n            </div>\n\n            <div className=\"input-section\">\n                <input\n                    type=\"text\"\n                    className=\"input-field\"\n                    value={userDiagnosis}\n                    onChange={handleDiagnosisChange}\n                    placeholder=\"Enter your diagnosis...\"\n                />\n                <input\n                    type=\"text\"\n                    className=\"input-field\"\n                    value={userReasoning}\n                    onChange={handleReasoningChange}\n                    placeholder=\"Enter your reasoning...\"\n                />\n                <button className=\"button\" onClick={checkDiagnosis}>Check your diagnosis</button>\n            </div>\n            \n            {analysis && (\n                <div className=\"analysis\">\n                    <h3>Analysis</h3>\n                    <p>{analysis}</p>\n                </div>\n            )}\n\n            <div className=\"input-section\">\n                <label htmlFor=\"time-dropdown\">Select Time Duration:</label>\n                <select\n                    id=\"time-dropdown\"\n                    value={numPulses}\n                    onChange={handleNumPulsesChange}\n                >\n                    <option value={3}>3 seconds</option>\n                    <option value={5}>5 seconds</option>\n                </select>\n                <button className=\"button\" onClick={simulateRandomEKG}>Generate New EKG</button>\n            </div>\n        </div>\n    );\n}\n\nexport default EKGSimulator;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}