{"ast":null,"code":"var _jsxFileName = \"/Users/matthewkalender/Desktop/HealthHack/ekg-simulator/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport Chart from \"chart.js/auto\";\nimport \"./App.css\"; // Ensure this file is created for styles\n\n/// Arrhythmias data structure\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst arrhythmias = {\n  \"Sinus Tachycardia\": {\n    heartRate: 100,\n    Pwave: true,\n    RtR: true,\n    // Regular R-R intervals\n    Placement: false,\n    // P wave before QRS complex\n    Ppositive: true,\n    // P wave is upside down\n    description: \"Regular rhythm with a P wave preceding every QRS complex.\"\n  },\n  \"Afib with RVR\": {\n    //Afib with RVR\n    heartRate: 150,\n    Pwave: false,\n    Rtr: false,\n    Placement: false,\n    description: \"Lacks distinct P waves, has variable R-R intervals.\"\n  },\n  \"AVRT\": {\n    //AVRT\n    heartRate: 220,\n    Pwave: true,\n    Rtr: true,\n    Placement: true,\n    Ppositive: false,\n    // P wave is upside down\n    description: \"Very fast rate (200-300 bpm), with retrograde P waves.\"\n  },\n  \"AVNRT\": {\n    //AVNRT\n    heartRate: 180,\n    Pwave: false,\n    RtR: true,\n    // Irregular R-R intervals\n    Placement: false,\n    description: \"Fast rate, with retrograde P waves possibly overlaying the QRS.\"\n  }\n};\n// Merged function to generate EKG waveform and signal (keep your original generateEKG function here)\n\nfunction EKGSimulator() {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  const [showLabeledGraph, setShowLabeledGraph] = useState(false);\n  const [userDiagnosis, setUserDiagnosis] = useState(\"\");\n  const [userReasoning, setUserReasoning] = useState(\"\");\n  const [chosenEKGType, setChosenEKGType] = useState(\"\");\n  const [numPulses, setNumPulses] = useState(3); // Default to 3 pulses\n  const [wavePositions, setWavePositions] = useState([]);\n  const [analysis, setAnalysis] = useState(null); // To store the response from ChatGPT\n\n  const handleDiagnosisChange = event => {\n    setUserDiagnosis(event.target.value);\n  };\n  const handleReasoningChange = event => {\n    setUserReasoning(event.target.value);\n  };\n  const handleNumPulsesChange = event => {\n    const value = parseInt(event.target.value);\n    if (value === 3 || value === 5) {\n      setNumPulses(value);\n    }\n  };\n  const checkDiagnosis = async () => {\n    try {\n      const response = await fetch(\"http://localhost:8000/analyze-response\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          user_answer: userDiagnosis,\n          correct_answer: chosenEKGType,\n          user_explanation: userReasoning,\n          ekg_attributes: ekgTypes[chosenEKGType]\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch analysis\");\n      }\n      const data = await response.json();\n      setAnalysis(data.feedback); // Set the analysis response from ChatGPT\n    } catch (error) {\n      console.error(\"Error fetching analysis:\", error);\n    }\n  };\n  const simulateRandomEKG = () => {\n    const arrhythmiaTypes = Object.keys(ekgTypes);\n    const randomType = arrhythmiaTypes[Math.floor(Math.random() * arrhythmiaTypes.length)];\n    setChosenEKGType(randomType);\n    const {\n      t,\n      ekgSignal,\n      wavePositions\n    } = generateEKG(5, randomType, 1000, numPulses); // Generate based on arrhythmia type\n    setWavePositions(wavePositions); // Save wave positions for background highlighting\n\n    const data = {\n      labels: t,\n      datasets: [{\n        label: `EKG Signal Below:`,\n        data: ekgSignal,\n        borderColor: \"black\",\n        // Change the line color to black\n        pointRadius: 0,\n        // Remove bullet points\n        showLine: true,\n        // Ensure line is shown\n        fill: false\n      }]\n    };\n    setChartData(data);\n\n    // Reset inputs and analysis on new EKG generation\n    setUserDiagnosis(\"\");\n    setUserReasoning(\"\");\n    setAnalysis(null);\n  };\n  useEffect(() => {\n    simulateRandomEKG();\n  }, [numPulses]); // Re-run simulation when numPulses changes\n\n  // Chart options for highlighting wave areas\n  const chartOptions = {\n    scales: {\n      y: {\n        beginAtZero: true\n      },\n      x: {\n        ticks: {\n          callback: value => value.toFixed(2) // Show decimal values for time\n        }\n      }\n    },\n    plugins: {\n      annotation: {\n        annotations: {}\n      }\n    }\n  };\n\n  // Add background highlights for P, QRS, and T waves\n  if (chartData) {\n    wavePositions.forEach(({\n      type,\n      start,\n      end\n    }) => {\n      const color = type === 'P' ? 'rgba(255, 223, 186, 0.5)' : type === 'T' ? 'rgba(186, 255, 233, 0.5)' : 'rgba(255, 186, 186, 0.5)';\n      chartOptions.plugins.annotation.annotations[`highlight${type}`] = {\n        type: 'box',\n        xMin: start / 1000,\n        // Convert to seconds\n        xMax: end / 1000,\n        // Convert to seconds\n        yMin: -1,\n        // Adjust these values based on the EKG scale\n        yMax: 1,\n        backgroundColor: color,\n        borderWidth: 0\n      };\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"EKG Simulator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: chartData && /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData,\n        options: {\n          responsive: true\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 31\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"input-field\",\n        value: userDiagnosis,\n        onChange: handleDiagnosisChange,\n        placeholder: \"Enter your diagnosis...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"input-field\",\n        value: userReasoning,\n        onChange: handleReasoningChange,\n        placeholder: \"Enter your reasoning...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button\",\n        onClick: checkDiagnosis,\n        children: \"Check your diagnosis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }, this), analysis && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"analysis\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Analysis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: analysis\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"time-dropdown\",\n        children: \"Select Time Duration:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"time-dropdown\",\n        value: numPulses,\n        onChange: handleNumPulsesChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: 3,\n          children: \"3 seconds\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: 5,\n          children: \"5 seconds\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button\",\n        onClick: simulateRandomEKG,\n        children: \"Generate New EKG\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 9\n  }, this);\n}\n_s(EKGSimulator, \"Jyw/hl+FFPRy+Q5eI/dCcyrjGSw=\");\n_c = EKGSimulator;\nexport default EKGSimulator;\nvar _c;\n$RefreshReg$(_c, \"EKGSimulator\");","map":{"version":3,"names":["React","useState","useEffect","Line","Chart","jsxDEV","_jsxDEV","arrhythmias","heartRate","Pwave","RtR","Placement","Ppositive","description","Rtr","EKGSimulator","_s","chartData","setChartData","showLabeledGraph","setShowLabeledGraph","userDiagnosis","setUserDiagnosis","userReasoning","setUserReasoning","chosenEKGType","setChosenEKGType","numPulses","setNumPulses","wavePositions","setWavePositions","analysis","setAnalysis","handleDiagnosisChange","event","target","value","handleReasoningChange","handleNumPulsesChange","parseInt","checkDiagnosis","response","fetch","method","headers","body","JSON","stringify","user_answer","correct_answer","user_explanation","ekg_attributes","ekgTypes","ok","Error","data","json","feedback","error","console","simulateRandomEKG","arrhythmiaTypes","Object","keys","randomType","Math","floor","random","length","t","ekgSignal","generateEKG","labels","datasets","label","borderColor","pointRadius","showLine","fill","chartOptions","scales","y","beginAtZero","x","ticks","callback","toFixed","plugins","annotation","annotations","forEach","type","start","end","color","xMin","xMax","yMin","yMax","backgroundColor","borderWidth","className","children","fileName","_jsxFileName","lineNumber","columnNumber","options","responsive","onChange","placeholder","onClick","htmlFor","id","_c","$RefreshReg$"],"sources":["/Users/matthewkalender/Desktop/HealthHack/ekg-simulator/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport Chart from \"chart.js/auto\";\nimport \"./App.css\"; // Ensure this file is created for styles\n\n/// Arrhythmias data structure\nconst arrhythmias = {\n    \"Sinus Tachycardia\": { \n        heartRate: 100,\n        Pwave: true,\n        RtR: true, // Regular R-R intervals\n        Placement: false, // P wave before QRS complex\n        Ppositive: true, // P wave is upside down\n        description: \"Regular rhythm with a P wave preceding every QRS complex.\" \n    },\n    \"Afib with RVR\": { //Afib with RVR\n        heartRate: 150,\n        Pwave: false,\n\t    Rtr: false,\n        Placement: false, \n        description: \"Lacks distinct P waves, has variable R-R intervals.\" \n    },\n    \"AVRT\": { //AVRT\n        heartRate: 220,\n        Pwave: true,\n\t    Rtr: true,\n        Placement: true,\n        Ppositive: false, // P wave is upside down\n        description: \"Very fast rate (200-300 bpm), with retrograde P waves.\" \n    },\n    \"AVNRT\": { //AVNRT\n        heartRate: 180,\n        Pwave: false,\n        RtR: true, // Irregular R-R intervals\n        Placement: false,\n        description: \"Fast rate, with retrograde P waves possibly overlaying the QRS.\" \n    }\n};\n// Merged function to generate EKG waveform and signal (keep your original generateEKG function here)\n\nfunction EKGSimulator() {\n    const [chartData, setChartData] = useState(null);\n    const [showLabeledGraph, setShowLabeledGraph] = useState(false);\n    const [userDiagnosis, setUserDiagnosis] = useState(\"\");\n    const [userReasoning, setUserReasoning] = useState(\"\");\n    const [chosenEKGType, setChosenEKGType] = useState(\"\");\n    const [numPulses, setNumPulses] = useState(3); // Default to 3 pulses\n    const [wavePositions, setWavePositions] = useState([]);\n    const [analysis, setAnalysis] = useState(null); // To store the response from ChatGPT\n\n    const handleDiagnosisChange = (event) => {\n        setUserDiagnosis(event.target.value);\n    };\n\n    const handleReasoningChange = (event) => {\n        setUserReasoning(event.target.value);\n    };\n\n    const handleNumPulsesChange = (event) => {\n        const value = parseInt(event.target.value);\n        if (value === 3 || value === 5) {\n            setNumPulses(value);\n        }\n    };\n\n    const checkDiagnosis = async () => {\n        try {\n            const response = await fetch(\"http://localhost:8000/analyze-response\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    user_answer: userDiagnosis,\n                    correct_answer: chosenEKGType,\n                    user_explanation: userReasoning,\n                    ekg_attributes: ekgTypes[chosenEKGType]\n                })\n            });\n\n            if (!response.ok) {\n                throw new Error(\"Failed to fetch analysis\");\n            }\n\n            const data = await response.json();\n            setAnalysis(data.feedback); // Set the analysis response from ChatGPT\n        } catch (error) {\n            console.error(\"Error fetching analysis:\", error);\n        }\n    };\n\n    const simulateRandomEKG = () => {\n        const arrhythmiaTypes = Object.keys(ekgTypes);\n        const randomType = arrhythmiaTypes[Math.floor(Math.random() * arrhythmiaTypes.length)];\n        setChosenEKGType(randomType);\n\n        const { t, ekgSignal, wavePositions } = generateEKG(5, randomType, 1000, numPulses); // Generate based on arrhythmia type\n        setWavePositions(wavePositions); // Save wave positions for background highlighting\n\n        const data = {\n            labels: t,\n            datasets: [{\n                label: `EKG Signal Below:`,\n                data: ekgSignal,\n                borderColor: \"black\", // Change the line color to black\n                pointRadius: 0, // Remove bullet points\n                showLine: true,  // Ensure line is shown\n                fill: false\n            }],\n        };\n\n        setChartData(data);\n\n        // Reset inputs and analysis on new EKG generation\n        setUserDiagnosis(\"\");\n        setUserReasoning(\"\");\n        setAnalysis(null);\n    };\n\n    useEffect(() => {\n        simulateRandomEKG();\n    }, [numPulses]); // Re-run simulation when numPulses changes\n\n    // Chart options for highlighting wave areas\n    const chartOptions = {\n        scales: {\n            y: {\n                beginAtZero: true,\n            },\n            x: {\n                ticks: {\n                    callback: (value) => value.toFixed(2), // Show decimal values for time\n                },\n            },\n        },\n        plugins: {\n            annotation: {\n                annotations: {},\n            },\n        },\n    };\n\n    // Add background highlights for P, QRS, and T waves\n    if (chartData) {\n        wavePositions.forEach(({ type, start, end }) => {\n            const color = type === 'P' ? 'rgba(255, 223, 186, 0.5)' : type === 'T' ? 'rgba(186, 255, 233, 0.5)' : 'rgba(255, 186, 186, 0.5)';\n            chartOptions.plugins.annotation.annotations[`highlight${type}`] = {\n                type: 'box',\n                xMin: start / 1000, // Convert to seconds\n                xMax: end / 1000, // Convert to seconds\n                yMin: -1, // Adjust these values based on the EKG scale\n                yMax: 1,\n                backgroundColor: color,\n                borderWidth: 0,\n            };\n        });\n    }\n\n    return (\n        <div className=\"App\">\n            <h1>EKG Simulator</h1>\n\n            <div className=\"chart-container\">\n                {chartData && <Line data={chartData} options={{ responsive: true }} />}\n            </div>\n\n            <div className=\"input-section\">\n                <input\n                    type=\"text\"\n                    className=\"input-field\"\n                    value={userDiagnosis}\n                    onChange={handleDiagnosisChange}\n                    placeholder=\"Enter your diagnosis...\"\n                />\n                <input\n                    type=\"text\"\n                    className=\"input-field\"\n                    value={userReasoning}\n                    onChange={handleReasoningChange}\n                    placeholder=\"Enter your reasoning...\"\n                />\n                <button className=\"button\" onClick={checkDiagnosis}>Check your diagnosis</button>\n            </div>\n            \n            {analysis && (\n                <div className=\"analysis\">\n                    <h3>Analysis</h3>\n                    <p>{analysis}</p>\n                </div>\n            )}\n\n            <div className=\"input-section\">\n                <label htmlFor=\"time-dropdown\">Select Time Duration:</label>\n                <select\n                    id=\"time-dropdown\"\n                    value={numPulses}\n                    onChange={handleNumPulsesChange}\n                >\n                    <option value={3}>3 seconds</option>\n                    <option value={5}>5 seconds</option>\n                </select>\n                <button className=\"button\" onClick={simulateRandomEKG}>Generate New EKG</button>\n            </div>\n        </div>\n    );\n}\n\nexport default EKGSimulator;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}