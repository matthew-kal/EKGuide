{"ast":null,"code":"var _jsxFileName = \"/Users/matthewkalender/Desktop/HealthHack/ekg-simulator/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport Chart from \"chart.js/auto\";\nimport \"./App.css\";\n\n// EKG Simulation Helper Functions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction gaussianWave(x, mean, amplitude, width) {\n  return amplitude * Math.exp(-((x - mean) ** 2) / (2 * width ** 2));\n}\nfunction ekgWaveform(t, heartRate = 60, pWave = true) {\n  const beatDuration = 60 / heartRate;\n  let ekgBeat = Array(t.length).fill(0);\n\n  // Define wave positions\n  const pWaveStart = pWave ? 0.2 * beatDuration : null;\n  const qWaveStart = 0.4 * beatDuration;\n  const rWaveStart = 0.45 * beatDuration;\n  const sWaveStart = 0.5 * beatDuration;\n  const tWaveStart = 0.7 * beatDuration;\n\n  // Add P wave\n  if (pWaveStart !== null) {\n    ekgBeat = ekgBeat.map((y, i) => y + gaussianWave(t[i], pWaveStart, 0.1, 0.05 * beatDuration));\n  }\n\n  // QRS complex and T wave\n  ekgBeat = ekgBeat.map((y, i) => y - gaussianWave(t[i], qWaveStart, 0.15, 0.02 * beatDuration) + gaussianWave(t[i], rWaveStart, 1.0, 0.01 * beatDuration) - gaussianWave(t[i], sWaveStart, 0.2, 0.02 * beatDuration) + gaussianWave(t[i], tWaveStart, 0.3, 0.1 * beatDuration));\n  return ekgBeat;\n}\nfunction generateEKG(duration = 5, heartRate = 72, samplingRate = 1000, numWaves = 1) {\n  const numSamples = duration * samplingRate;\n  const t = Array.from({\n    length: numSamples\n  }, (_, i) => i / samplingRate);\n  let ekgSignal = Array(t.length).fill(0);\n  for (let i = 0; i < numWaves; i++) {\n    const start = Math.floor(i * (60 / heartRate) * samplingRate);\n    const end = start + Math.floor(60 / heartRate * samplingRate);\n    const ekgBeat = ekgWaveform(t.slice(0, end - start), heartRate);\n    for (let j = start; j < end && j < ekgSignal.length; j++) {\n      ekgSignal[j] += ekgBeat[j - start] + 0.05 * (Math.random() - 0.5); // Add noise\n    }\n  }\n  return {\n    t,\n    ekgSignal\n  };\n}\n\n// Arrhythmias data structure\nconst arrhythmias = {\n  \"Sinus Tachycardia\": {\n    heartRate: 100,\n    description: \"Sinus tachycardia is characterized by a regular rhythm with a P wave preceding every QRS complex.\"\n  },\n  \"Afib with RVR\": {\n    heartRate: 150,\n    description: \"Atrial fibrillation with rapid ventricular response lacks distinct P waves and has variable R-R intervals.\"\n  },\n  \"AVRT\": {\n    heartRate: 220,\n    description: \"AVRT shows a very fast rate (200-300 bpm), with retrograde P waves and variable R wave amplitude.\"\n  },\n  \"AVNRT\": {\n    heartRate: 180,\n    description: \"AVNRT has a fast rate, with retrograde P waves possibly overlaying the QRS.\"\n  }\n};\nfunction EKGSimulator() {\n  _s();\n  const [chartData, setChartData] = useState([]);\n  const [userDiagnosis, setUserDiagnosis] = useState(\"\");\n  const [chosenEKGType, setChosenEKGType] = useState(\"\");\n  const [numGraphs, setNumGraphs] = useState(3); // Default to 3 graphs\n\n  const handleDiagnosisChange = event => {\n    setUserDiagnosis(event.target.value);\n  };\n  const handleNumGraphsChange = event => {\n    const value = parseInt(event.target.value);\n    if (value === 3 || value === 5) {\n      setNumGraphs(value);\n    }\n  };\n  const checkDiagnosis = () => {\n    if (userDiagnosis.toLowerCase() === chosenEKGType.toLowerCase()) {\n      alert(\"Correct! Well done!\");\n    } else {\n      alert(`Incorrect. The correct answer was '${chosenEKGType}'.`);\n    }\n    // Show explanation\n    alert(arrhythmias[chosenEKGType].description);\n  };\n  const simulateRandomEKG = () => {\n    const arrhythmiaTypes = Object.keys(arrhythmias);\n    const newChartData = []; // Store multiple graphs data\n\n    for (let i = 0; i < numGraphs; i++) {\n      const randomType = arrhythmiaTypes[Math.floor(Math.random() * arrhythmiaTypes.length)];\n      setChosenEKGType(randomType);\n      const {\n        heartRate\n      } = arrhythmias[randomType];\n      const {\n        t,\n        ekgSignal\n      } = generateEKG(5, heartRate, 1000, 5); // Generate 5 waves for each graph\n      newChartData.push({\n        labels: t,\n        datasets: [{\n          label: `EKG Signal - ${randomType}`,\n          data: ekgSignal,\n          borderColor: \"blue\",\n          pointRadius: 0,\n          // Remove bullet points\n          showLine: true,\n          // Ensure line is shown\n          fill: false\n        }]\n      });\n    }\n    setChartData(newChartData);\n  };\n  useEffect(() => {\n    simulateRandomEKG();\n  }, [numGraphs]); // Re-run simulation when numGraphs changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"EKG Simulator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userDiagnosis,\n        onChange: handleDiagnosisChange,\n        placeholder: \"Enter your diagnosis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: checkDiagnosis,\n        children: \"Submit Diagnosis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Number of graphs:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: numGraphs,\n          onChange: handleNumGraphsChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: 3,\n            children: \"3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: 5,\n            children: \"5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: simulateRandomEKG,\n        children: \"Generate EKGs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: chartData.map((data, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart\",\n        children: /*#__PURE__*/_jsxDEV(Line, {\n          data: data,\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            scales: {\n              x: {\n                title: {\n                  display: true,\n                  text: 'Time (s)'\n                }\n              },\n              y: {\n                title: {\n                  display: true,\n                  text: 'Voltage (mV)'\n                },\n                beginAtZero: true\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 25\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 9\n  }, this);\n}\n_s(EKGSimulator, \"5ISiNinBzn+7SJcJPFo3eXolzdc=\");\n_c = EKGSimulator;\nexport default EKGSimulator;\nvar _c;\n$RefreshReg$(_c, \"EKGSimulator\");","map":{"version":3,"names":["React","useState","useEffect","Line","Chart","jsxDEV","_jsxDEV","gaussianWave","x","mean","amplitude","width","Math","exp","ekgWaveform","t","heartRate","pWave","beatDuration","ekgBeat","Array","length","fill","pWaveStart","qWaveStart","rWaveStart","sWaveStart","tWaveStart","map","y","i","generateEKG","duration","samplingRate","numWaves","numSamples","from","_","ekgSignal","start","floor","end","slice","j","random","arrhythmias","description","EKGSimulator","_s","chartData","setChartData","userDiagnosis","setUserDiagnosis","chosenEKGType","setChosenEKGType","numGraphs","setNumGraphs","handleDiagnosisChange","event","target","value","handleNumGraphsChange","parseInt","checkDiagnosis","toLowerCase","alert","simulateRandomEKG","arrhythmiaTypes","Object","keys","newChartData","randomType","push","labels","datasets","label","data","borderColor","pointRadius","showLine","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","onClick","index","options","responsive","maintainAspectRatio","scales","title","display","text","beginAtZero","_c","$RefreshReg$"],"sources":["/Users/matthewkalender/Desktop/HealthHack/ekg-simulator/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport Chart from \"chart.js/auto\";\nimport \"./App.css\";\n\n// EKG Simulation Helper Functions\n\nfunction gaussianWave(x, mean, amplitude, width) {\n    return amplitude * Math.exp(-((x - mean) ** 2) / (2 * width ** 2));\n}\n\nfunction ekgWaveform(t, heartRate = 60, pWave = true) {\n    const beatDuration = 60 / heartRate;\n    let ekgBeat = Array(t.length).fill(0);\n    \n    // Define wave positions\n    const pWaveStart = pWave ? 0.2 * beatDuration : null;\n    const qWaveStart = 0.4 * beatDuration;\n    const rWaveStart = 0.45 * beatDuration;\n    const sWaveStart = 0.5 * beatDuration;\n    const tWaveStart = 0.7 * beatDuration;\n\n    // Add P wave\n    if (pWaveStart !== null) {\n        ekgBeat = ekgBeat.map((y, i) => y + gaussianWave(t[i], pWaveStart, 0.1, 0.05 * beatDuration));\n    }\n\n    // QRS complex and T wave\n    ekgBeat = ekgBeat.map((y, i) =>\n        y -\n        gaussianWave(t[i], qWaveStart, 0.15, 0.02 * beatDuration) +\n        gaussianWave(t[i], rWaveStart, 1.0, 0.01 * beatDuration) -\n        gaussianWave(t[i], sWaveStart, 0.2, 0.02 * beatDuration) +\n        gaussianWave(t[i], tWaveStart, 0.3, 0.1 * beatDuration)\n    );\n\n    return ekgBeat;\n}\n\nfunction generateEKG(duration = 5, heartRate = 72, samplingRate = 1000, numWaves = 1) {\n    const numSamples = duration * samplingRate;\n    const t = Array.from({ length: numSamples }, (_, i) => i / samplingRate);\n    let ekgSignal = Array(t.length).fill(0);\n\n    for (let i = 0; i < numWaves; i++) {\n        const start = Math.floor(i * (60 / heartRate) * samplingRate);\n        const end = start + Math.floor((60 / heartRate) * samplingRate);\n        const ekgBeat = ekgWaveform(t.slice(0, end - start), heartRate);\n        \n        for (let j = start; j < end && j < ekgSignal.length; j++) {\n            ekgSignal[j] += ekgBeat[j - start] + 0.05 * (Math.random() - 0.5); // Add noise\n        }\n    }\n\n    return { t, ekgSignal };\n}\n\n// Arrhythmias data structure\nconst arrhythmias = {\n    \"Sinus Tachycardia\": { heartRate: 100, description: \"Sinus tachycardia is characterized by a regular rhythm with a P wave preceding every QRS complex.\" },\n    \"Afib with RVR\": { heartRate: 150, description: \"Atrial fibrillation with rapid ventricular response lacks distinct P waves and has variable R-R intervals.\" },\n    \"AVRT\": { heartRate: 220, description: \"AVRT shows a very fast rate (200-300 bpm), with retrograde P waves and variable R wave amplitude.\" },\n    \"AVNRT\": { heartRate: 180, description: \"AVNRT has a fast rate, with retrograde P waves possibly overlaying the QRS.\" }\n};\n\nfunction EKGSimulator() {\n    const [chartData, setChartData] = useState([]);\n    const [userDiagnosis, setUserDiagnosis] = useState(\"\");\n    const [chosenEKGType, setChosenEKGType] = useState(\"\");\n    const [numGraphs, setNumGraphs] = useState(3); // Default to 3 graphs\n\n    const handleDiagnosisChange = (event) => {\n        setUserDiagnosis(event.target.value);\n    };\n\n    const handleNumGraphsChange = (event) => {\n        const value = parseInt(event.target.value);\n        if (value === 3 || value === 5) {\n            setNumGraphs(value);\n        }\n    };\n\n    const checkDiagnosis = () => {\n        if (userDiagnosis.toLowerCase() === chosenEKGType.toLowerCase()) {\n            alert(\"Correct! Well done!\");\n        } else {\n            alert(`Incorrect. The correct answer was '${chosenEKGType}'.`);\n        }\n        // Show explanation\n        alert(arrhythmias[chosenEKGType].description);\n    };\n\n    const simulateRandomEKG = () => {\n        const arrhythmiaTypes = Object.keys(arrhythmias);\n        const newChartData = []; // Store multiple graphs data\n\n        for (let i = 0; i < numGraphs; i++) {\n            const randomType = arrhythmiaTypes[Math.floor(Math.random() * arrhythmiaTypes.length)];\n            setChosenEKGType(randomType);\n\n            const { heartRate } = arrhythmias[randomType];\n            const { t, ekgSignal } = generateEKG(5, heartRate, 1000, 5); // Generate 5 waves for each graph\n            newChartData.push({\n                labels: t,\n                datasets: [{\n                    label: `EKG Signal - ${randomType}`,\n                    data: ekgSignal,\n                    borderColor: \"blue\",\n                    pointRadius: 0, // Remove bullet points\n                    showLine: true,  // Ensure line is shown\n                    fill: false\n                }],\n            });\n        }\n\n        setChartData(newChartData);\n    };\n\n    useEffect(() => {\n        simulateRandomEKG();\n    }, [numGraphs]); // Re-run simulation when numGraphs changes\n\n    return (\n        <div className=\"App\">\n            <h1>EKG Simulator</h1>\n            <div>\n                <input\n                    type=\"text\"\n                    value={userDiagnosis}\n                    onChange={handleDiagnosisChange}\n                    placeholder=\"Enter your diagnosis\"\n                />\n                <button onClick={checkDiagnosis}>Submit Diagnosis</button>\n                <br />\n                <label>\n                    Number of graphs:\n                    <select value={numGraphs} onChange={handleNumGraphsChange}>\n                        <option value={3}>3</option>\n                        <option value={5}>5</option>\n                    </select>\n                </label>\n                <button onClick={simulateRandomEKG}>Generate EKGs</button>\n            </div>\n            <div className=\"chart-container\">\n                {chartData.map((data, index) => (\n                    <div key={index} className=\"chart\">\n                        <Line data={data} options={{\n                            responsive: true,\n                            maintainAspectRatio: false,\n                            scales: {\n                                x: {\n                                    title: {\n                                        display: true,\n                                        text: 'Time (s)',\n                                    },\n                                },\n                                y: {\n                                    title: {\n                                        display: true,\n                                        text: 'Voltage (mV)',\n                                    },\n                                    beginAtZero: true,\n                                }\n                            },\n                        }} />\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default EKGSimulator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}