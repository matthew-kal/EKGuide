{"ast":null,"code":"var _jsxFileName = \"/Users/matthewkalender/Desktop/HealthHack/ekg-simulator/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport Chart from \"chart.js/auto\";\nimport \"./App.css\";\n\n// EKG Simulation Helper Functions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction gaussianWave(x, mean, amplitude, width) {\n  return amplitude * Math.exp(-((x - mean) ** 2) / (2 * width ** 2));\n}\nfunction ekgWaveform(t, heartRate = 60, pWave = true) {\n  const beatDuration = 60 / heartRate;\n  let ekgBeat = Array(t.length).fill(0);\n\n  // Define wave positions\n  const pWaveStart = pWave ? 0.2 * beatDuration : null;\n  const qWaveStart = 0.4 * beatDuration;\n  const rWaveStart = 0.45 * beatDuration;\n  const sWaveStart = 0.5 * beatDuration;\n  const tWaveStart = 0.7 * beatDuration;\n\n  // Add P wave\n  if (pWaveStart !== null) {\n    ekgBeat = ekgBeat.map((y, i) => y + gaussianWave(t[i], pWaveStart, 0.1, 0.05 * beatDuration));\n  }\n\n  // QRS complex and T wave\n  ekgBeat = ekgBeat.map((y, i) => y - gaussianWave(t[i], qWaveStart, 0.15, 0.02 * beatDuration) + gaussianWave(t[i], rWaveStart, 1.0, 0.01 * beatDuration) - gaussianWave(t[i], sWaveStart, 0.2, 0.02 * beatDuration) + gaussianWave(t[i], tWaveStart, 0.3, 0.1 * beatDuration));\n  return ekgBeat;\n}\nfunction generateEKG(duration = 5, heartRate = 72, samplingRate = 1000, numWaves = 1) {\n  const numSamples = duration * samplingRate;\n  const t = Array.from({\n    length: numSamples\n  }, (_, i) => i / samplingRate);\n  let ekgSignal = Array(t.length).fill(0);\n  for (let i = 0; i < numWaves; i++) {\n    const start = Math.floor(i * (60 / heartRate) * samplingRate);\n    const end = start + Math.floor(60 / heartRate * samplingRate);\n    const ekgBeat = ekgWaveform(t.slice(0, end - start), heartRate);\n    for (let j = start; j < end && j < ekgSignal.length; j++) {\n      ekgSignal[j] += ekgBeat[j - start] + 0.05 * (Math.random() - 0.5); // Add noise\n    }\n  }\n\n  // Trim the time and ekgSignal arrays to contain only the relevant data\n  const trimmedEnd = Math.ceil(numWaves * (60 / heartRate) * samplingRate);\n  return {\n    t: t.slice(0, trimmedEnd),\n    ekgSignal: ekgSignal.slice(0, trimmedEnd)\n  };\n}\n\n// Arrhythmias data structure\nconst arrhythmias = {\n  \"Sinus Tachycardia\": {\n    heartRate: 100,\n    description: \"Sinus tachycardia is characterized by a regular rhythm with a P wave preceding every QRS complex.\"\n  },\n  \"Afib with RVR\": {\n    heartRate: 150,\n    description: \"Atrial fibrillation with rapid ventricular response lacks distinct P waves and has variable R-R intervals.\"\n  },\n  \"AVRT\": {\n    heartRate: 220,\n    description: \"AVRT shows a very fast rate (200-300 bpm), with retrograde P waves and variable R wave amplitude.\"\n  },\n  \"AVNRT\": {\n    heartRate: 180,\n    description: \"AVNRT has a fast rate, with retrograde P waves possibly overlaying the QRS.\"\n  }\n};\nfunction EKGSimulator() {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  const [userDiagnosis, setUserDiagnosis] = useState(\"\");\n  const [chosenEKGType, setChosenEKGType] = useState(\"\");\n  const [numPulses, setNumPulses] = useState(3); // Default to 3 pulses\n\n  const handleDiagnosisChange = event => {\n    setUserDiagnosis(event.target.value);\n  };\n  const handleNumPulsesChange = event => {\n    const value = parseInt(event.target.value);\n    if (value === 3 || value === 5) {\n      setNumPulses(value);\n    }\n  };\n  const checkDiagnosis = () => {\n    if (userDiagnosis.toLowerCase() === chosenEKGType.toLowerCase()) {\n      alert(\"Correct! Well done!\");\n    } else {\n      alert(`Incorrect. The correct answer was '${chosenEKGType}'.`);\n    }\n    // Show explanation\n    alert(arrhythmias[chosenEKGType].description);\n  };\n  const simulateRandomEKG = () => {\n    const arrhythmiaTypes = Object.keys(arrhythmias);\n    const randomType = arrhythmiaTypes[Math.floor(Math.random() * arrhythmiaTypes.length)];\n    setChosenEKGType(randomType);\n    const {\n      heartRate\n    } = arrhythmias[randomType];\n    const {\n      t,\n      ekgSignal\n    } = generateEKG(5, heartRate, 1000, numPulses); // Generate the selected number of pulses\n\n    const data = {\n      labels: t,\n      datasets: [{\n        label: `EKG Signal - ${randomType}`,\n        data: ekgSignal,\n        borderColor: \"black\",\n        // Change the line color to black\n        pointRadius: 0,\n        // Remove bullet points\n        showLine: true,\n        // Ensure line is shown\n        fill: false\n      }]\n    };\n    setChartData(data);\n  };\n  useEffect(() => {\n    simulateRandomEKG();\n  }, [numPulses]); // Re-run simulation when numPulses changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"EKG Simulator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userDiagnosis,\n        onChange: handleDiagnosisChange,\n        placeholder: \"Enter your diagnosis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: checkDiagnosis,\n        children: \"Submit Diagnosis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Number of pulses:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: numPulses,\n          onChange: handleNumPulsesChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: 3,\n            children: \"3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: 5,\n            children: \"5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: simulateRandomEKG,\n        children: \"Generate EKG\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      style: {\n        height: '800px',\n        width: '90%',\n        margin: '0 auto'\n      },\n      children: [\" \", chartData && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart\",\n        children: /*#__PURE__*/_jsxDEV(Line, {\n          data: chartData,\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            // Allow chart to adapt to new height\n            scales: {\n              x: {\n                title: {\n                  display: true,\n                  text: 'Time (s)'\n                },\n                ticks: {\n                  font: {\n                    size: 20 // Smaller tick labels\n                  }\n                }\n              },\n              y: {\n                title: {\n                  display: true,\n                  text: 'Voltage (mV)'\n                },\n                beginAtZero: true,\n                ticks: {\n                  font: {\n                    size: 10 // Smaller tick labels\n                  }\n                }\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 9\n  }, this);\n}\n_s(EKGSimulator, \"jOaot8DIp93x66qbW7B5cqxaphk=\");\n_c = EKGSimulator;\nexport default EKGSimulator;\nvar _c;\n$RefreshReg$(_c, \"EKGSimulator\");","map":{"version":3,"names":["React","useState","useEffect","Line","Chart","jsxDEV","_jsxDEV","gaussianWave","x","mean","amplitude","width","Math","exp","ekgWaveform","t","heartRate","pWave","beatDuration","ekgBeat","Array","length","fill","pWaveStart","qWaveStart","rWaveStart","sWaveStart","tWaveStart","map","y","i","generateEKG","duration","samplingRate","numWaves","numSamples","from","_","ekgSignal","start","floor","end","slice","j","random","trimmedEnd","ceil","arrhythmias","description","EKGSimulator","_s","chartData","setChartData","userDiagnosis","setUserDiagnosis","chosenEKGType","setChosenEKGType","numPulses","setNumPulses","handleDiagnosisChange","event","target","value","handleNumPulsesChange","parseInt","checkDiagnosis","toLowerCase","alert","simulateRandomEKG","arrhythmiaTypes","Object","keys","randomType","data","labels","datasets","label","borderColor","pointRadius","showLine","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","onClick","style","height","margin","options","responsive","maintainAspectRatio","scales","title","display","text","ticks","font","size","beginAtZero","_c","$RefreshReg$"],"sources":["/Users/matthewkalender/Desktop/HealthHack/ekg-simulator/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport Chart from \"chart.js/auto\";\nimport \"./App.css\";\n\n// EKG Simulation Helper Functions\n\nfunction gaussianWave(x, mean, amplitude, width) {\n    return amplitude * Math.exp(-((x - mean) ** 2) / (2 * width ** 2));\n}\n\nfunction ekgWaveform(t, heartRate = 60, pWave = true) {\n    const beatDuration = 60 / heartRate;\n    let ekgBeat = Array(t.length).fill(0);\n    \n    // Define wave positions\n    const pWaveStart = pWave ? 0.2 * beatDuration : null;\n    const qWaveStart = 0.4 * beatDuration;\n    const rWaveStart = 0.45 * beatDuration;\n    const sWaveStart = 0.5 * beatDuration;\n    const tWaveStart = 0.7 * beatDuration;\n\n    // Add P wave\n    if (pWaveStart !== null) {\n        ekgBeat = ekgBeat.map((y, i) => y + gaussianWave(t[i], pWaveStart, 0.1, 0.05 * beatDuration));\n    }\n\n    // QRS complex and T wave\n    ekgBeat = ekgBeat.map((y, i) =>\n        y -\n        gaussianWave(t[i], qWaveStart, 0.15, 0.02 * beatDuration) +\n        gaussianWave(t[i], rWaveStart, 1.0, 0.01 * beatDuration) -\n        gaussianWave(t[i], sWaveStart, 0.2, 0.02 * beatDuration) +\n        gaussianWave(t[i], tWaveStart, 0.3, 0.1 * beatDuration)\n    );\n\n    return ekgBeat;\n}\n\nfunction generateEKG(duration = 5, heartRate = 72, samplingRate = 1000, numWaves = 1) {\n    const numSamples = duration * samplingRate;\n    const t = Array.from({ length: numSamples }, (_, i) => i / samplingRate);\n    let ekgSignal = Array(t.length).fill(0);\n\n    for (let i = 0; i < numWaves; i++) {\n        const start = Math.floor(i * (60 / heartRate) * samplingRate);\n        const end = start + Math.floor((60 / heartRate) * samplingRate);\n        const ekgBeat = ekgWaveform(t.slice(0, end - start), heartRate);\n        \n        for (let j = start; j < end && j < ekgSignal.length; j++) {\n            ekgSignal[j] += ekgBeat[j - start] + 0.05 * (Math.random() - 0.5); // Add noise\n        }\n    }\n\n    // Trim the time and ekgSignal arrays to contain only the relevant data\n    const trimmedEnd = Math.ceil(numWaves * (60 / heartRate) * samplingRate);\n    return { t: t.slice(0, trimmedEnd), ekgSignal: ekgSignal.slice(0, trimmedEnd) };\n}\n\n// Arrhythmias data structure\nconst arrhythmias = {\n    \"Sinus Tachycardia\": { heartRate: 100, description: \"Sinus tachycardia is characterized by a regular rhythm with a P wave preceding every QRS complex.\" },\n    \"Afib with RVR\": { heartRate: 150, description: \"Atrial fibrillation with rapid ventricular response lacks distinct P waves and has variable R-R intervals.\" },\n    \"AVRT\": { heartRate: 220, description: \"AVRT shows a very fast rate (200-300 bpm), with retrograde P waves and variable R wave amplitude.\" },\n    \"AVNRT\": { heartRate: 180, description: \"AVNRT has a fast rate, with retrograde P waves possibly overlaying the QRS.\" }\n};\n\nfunction EKGSimulator() {\n    const [chartData, setChartData] = useState(null);\n    const [userDiagnosis, setUserDiagnosis] = useState(\"\");\n    const [chosenEKGType, setChosenEKGType] = useState(\"\");\n    const [numPulses, setNumPulses] = useState(3); // Default to 3 pulses\n\n    const handleDiagnosisChange = (event) => {\n        setUserDiagnosis(event.target.value);\n    };\n\n    const handleNumPulsesChange = (event) => {\n        const value = parseInt(event.target.value);\n        if (value === 3 || value === 5) {\n            setNumPulses(value);\n        }\n    };\n\n    const checkDiagnosis = () => {\n        if (userDiagnosis.toLowerCase() === chosenEKGType.toLowerCase()) {\n            alert(\"Correct! Well done!\");\n        } else {\n            alert(`Incorrect. The correct answer was '${chosenEKGType}'.`);\n        }\n        // Show explanation\n        alert(arrhythmias[chosenEKGType].description);\n    };\n\n    const simulateRandomEKG = () => {\n        const arrhythmiaTypes = Object.keys(arrhythmias);\n        const randomType = arrhythmiaTypes[Math.floor(Math.random() * arrhythmiaTypes.length)];\n        setChosenEKGType(randomType);\n\n        const { heartRate } = arrhythmias[randomType];\n        const { t, ekgSignal } = generateEKG(5, heartRate, 1000, numPulses); // Generate the selected number of pulses\n\n        const data = {\n            labels: t,\n            datasets: [{\n                label: `EKG Signal - ${randomType}`,\n                data: ekgSignal,\n                borderColor: \"black\", // Change the line color to black\n                pointRadius: 0, // Remove bullet points\n                showLine: true,  // Ensure line is shown\n                fill: false\n            }],\n        };\n\n        setChartData(data);\n    };\n\n    useEffect(() => {\n        simulateRandomEKG();\n    }, [numPulses]); // Re-run simulation when numPulses changes\n\n    return (\n        <div className=\"App\">\n            <h1>EKG Simulator</h1>\n            <div>\n                <input\n                    type=\"text\"\n                    value={userDiagnosis}\n                    onChange={handleDiagnosisChange}\n                    placeholder=\"Enter your diagnosis\"\n                />\n                <button onClick={checkDiagnosis}>Submit Diagnosis</button>\n                <br />\n                <label>\n                    Number of pulses:\n                    <select value={numPulses} onChange={handleNumPulsesChange}>\n                        <option value={3}>3</option>\n                        <option value={5}>5</option>\n                    </select>\n                </label>\n                <button onClick={simulateRandomEKG}>Generate EKG</button>\n            </div>\n            <div className=\"chart-container\" style={{ height: '800px', width: '90%', margin: '0 auto' }}> {/* Adjusted height */}\n                {chartData && (\n                    <div className=\"chart\">\n                        <Line data={chartData} options={{\n                            responsive: true,\n                            maintainAspectRatio: false, // Allow chart to adapt to new height\n                            scales: {\n                                x: {\n                                    title: {\n                                        display: true,\n                                        text: 'Time (s)',\n                                    },\n                                    ticks: {\n                                        font: {\n                                            size: 20 // Smaller tick labels\n                                        }\n                                    }\n                                },\n                                y: {\n                                    title: {\n                                        display: true,\n                                        text: 'Voltage (mV)',\n                                    },\n                                    beginAtZero: true,\n                                    ticks: {\n                                        font: {\n                                            size: 10 // Smaller tick labels\n                                        }\n                                    }\n                                }\n                            },\n                        }} />\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default EKGSimulator;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,iBAAiB;AACtC,OAAOC,KAAK,MAAM,eAAe;AACjC,OAAO,WAAW;;AAElB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,SAASC,YAAYA,CAACC,CAAC,EAAEC,IAAI,EAAEC,SAAS,EAAEC,KAAK,EAAE;EAC7C,OAAOD,SAAS,GAAGE,IAAI,CAACC,GAAG,CAAC,EAAE,CAACL,CAAC,GAAGC,IAAI,KAAK,CAAC,CAAC,IAAI,CAAC,GAAGE,KAAK,IAAI,CAAC,CAAC,CAAC;AACtE;AAEA,SAASG,WAAWA,CAACC,CAAC,EAAEC,SAAS,GAAG,EAAE,EAAEC,KAAK,GAAG,IAAI,EAAE;EAClD,MAAMC,YAAY,GAAG,EAAE,GAAGF,SAAS;EACnC,IAAIG,OAAO,GAAGC,KAAK,CAACL,CAAC,CAACM,MAAM,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;;EAErC;EACA,MAAMC,UAAU,GAAGN,KAAK,GAAG,GAAG,GAAGC,YAAY,GAAG,IAAI;EACpD,MAAMM,UAAU,GAAG,GAAG,GAAGN,YAAY;EACrC,MAAMO,UAAU,GAAG,IAAI,GAAGP,YAAY;EACtC,MAAMQ,UAAU,GAAG,GAAG,GAAGR,YAAY;EACrC,MAAMS,UAAU,GAAG,GAAG,GAAGT,YAAY;;EAErC;EACA,IAAIK,UAAU,KAAK,IAAI,EAAE;IACrBJ,OAAO,GAAGA,OAAO,CAACS,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGtB,YAAY,CAACQ,CAAC,CAACe,CAAC,CAAC,EAAEP,UAAU,EAAE,GAAG,EAAE,IAAI,GAAGL,YAAY,CAAC,CAAC;EACjG;;EAEA;EACAC,OAAO,GAAGA,OAAO,CAACS,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,KACvBD,CAAC,GACDtB,YAAY,CAACQ,CAAC,CAACe,CAAC,CAAC,EAAEN,UAAU,EAAE,IAAI,EAAE,IAAI,GAAGN,YAAY,CAAC,GACzDX,YAAY,CAACQ,CAAC,CAACe,CAAC,CAAC,EAAEL,UAAU,EAAE,GAAG,EAAE,IAAI,GAAGP,YAAY,CAAC,GACxDX,YAAY,CAACQ,CAAC,CAACe,CAAC,CAAC,EAAEJ,UAAU,EAAE,GAAG,EAAE,IAAI,GAAGR,YAAY,CAAC,GACxDX,YAAY,CAACQ,CAAC,CAACe,CAAC,CAAC,EAAEH,UAAU,EAAE,GAAG,EAAE,GAAG,GAAGT,YAAY,CAC1D,CAAC;EAED,OAAOC,OAAO;AAClB;AAEA,SAASY,WAAWA,CAACC,QAAQ,GAAG,CAAC,EAAEhB,SAAS,GAAG,EAAE,EAAEiB,YAAY,GAAG,IAAI,EAAEC,QAAQ,GAAG,CAAC,EAAE;EAClF,MAAMC,UAAU,GAAGH,QAAQ,GAAGC,YAAY;EAC1C,MAAMlB,CAAC,GAAGK,KAAK,CAACgB,IAAI,CAAC;IAAEf,MAAM,EAAEc;EAAW,CAAC,EAAE,CAACE,CAAC,EAAEP,CAAC,KAAKA,CAAC,GAAGG,YAAY,CAAC;EACxE,IAAIK,SAAS,GAAGlB,KAAK,CAACL,CAAC,CAACM,MAAM,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;EAEvC,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGI,QAAQ,EAAEJ,CAAC,EAAE,EAAE;IAC/B,MAAMS,KAAK,GAAG3B,IAAI,CAAC4B,KAAK,CAACV,CAAC,IAAI,EAAE,GAAGd,SAAS,CAAC,GAAGiB,YAAY,CAAC;IAC7D,MAAMQ,GAAG,GAAGF,KAAK,GAAG3B,IAAI,CAAC4B,KAAK,CAAE,EAAE,GAAGxB,SAAS,GAAIiB,YAAY,CAAC;IAC/D,MAAMd,OAAO,GAAGL,WAAW,CAACC,CAAC,CAAC2B,KAAK,CAAC,CAAC,EAAED,GAAG,GAAGF,KAAK,CAAC,EAAEvB,SAAS,CAAC;IAE/D,KAAK,IAAI2B,CAAC,GAAGJ,KAAK,EAAEI,CAAC,GAAGF,GAAG,IAAIE,CAAC,GAAGL,SAAS,CAACjB,MAAM,EAAEsB,CAAC,EAAE,EAAE;MACtDL,SAAS,CAACK,CAAC,CAAC,IAAIxB,OAAO,CAACwB,CAAC,GAAGJ,KAAK,CAAC,GAAG,IAAI,IAAI3B,IAAI,CAACgC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;IACvE;EACJ;;EAEA;EACA,MAAMC,UAAU,GAAGjC,IAAI,CAACkC,IAAI,CAACZ,QAAQ,IAAI,EAAE,GAAGlB,SAAS,CAAC,GAAGiB,YAAY,CAAC;EACxE,OAAO;IAAElB,CAAC,EAAEA,CAAC,CAAC2B,KAAK,CAAC,CAAC,EAAEG,UAAU,CAAC;IAAEP,SAAS,EAAEA,SAAS,CAACI,KAAK,CAAC,CAAC,EAAEG,UAAU;EAAE,CAAC;AACnF;;AAEA;AACA,MAAME,WAAW,GAAG;EAChB,mBAAmB,EAAE;IAAE/B,SAAS,EAAE,GAAG;IAAEgC,WAAW,EAAE;EAAoG,CAAC;EACzJ,eAAe,EAAE;IAAEhC,SAAS,EAAE,GAAG;IAAEgC,WAAW,EAAE;EAA6G,CAAC;EAC9J,MAAM,EAAE;IAAEhC,SAAS,EAAE,GAAG;IAAEgC,WAAW,EAAE;EAAoG,CAAC;EAC5I,OAAO,EAAE;IAAEhC,SAAS,EAAE,GAAG;IAAEgC,WAAW,EAAE;EAA8E;AAC1H,CAAC;AAED,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGnD,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACoD,aAAa,EAAEC,gBAAgB,CAAC,GAAGrD,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACsD,aAAa,EAAEC,gBAAgB,CAAC,GAAGvD,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACwD,SAAS,EAAEC,YAAY,CAAC,GAAGzD,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;;EAE/C,MAAM0D,qBAAqB,GAAIC,KAAK,IAAK;IACrCN,gBAAgB,CAACM,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACxC,CAAC;EAED,MAAMC,qBAAqB,GAAIH,KAAK,IAAK;IACrC,MAAME,KAAK,GAAGE,QAAQ,CAACJ,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;IAC1C,IAAIA,KAAK,KAAK,CAAC,IAAIA,KAAK,KAAK,CAAC,EAAE;MAC5BJ,YAAY,CAACI,KAAK,CAAC;IACvB;EACJ,CAAC;EAED,MAAMG,cAAc,GAAGA,CAAA,KAAM;IACzB,IAAIZ,aAAa,CAACa,WAAW,CAAC,CAAC,KAAKX,aAAa,CAACW,WAAW,CAAC,CAAC,EAAE;MAC7DC,KAAK,CAAC,qBAAqB,CAAC;IAChC,CAAC,MAAM;MACHA,KAAK,CAAC,sCAAsCZ,aAAa,IAAI,CAAC;IAClE;IACA;IACAY,KAAK,CAACpB,WAAW,CAACQ,aAAa,CAAC,CAACP,WAAW,CAAC;EACjD,CAAC;EAED,MAAMoB,iBAAiB,GAAGA,CAAA,KAAM;IAC5B,MAAMC,eAAe,GAAGC,MAAM,CAACC,IAAI,CAACxB,WAAW,CAAC;IAChD,MAAMyB,UAAU,GAAGH,eAAe,CAACzD,IAAI,CAAC4B,KAAK,CAAC5B,IAAI,CAACgC,MAAM,CAAC,CAAC,GAAGyB,eAAe,CAAChD,MAAM,CAAC,CAAC;IACtFmC,gBAAgB,CAACgB,UAAU,CAAC;IAE5B,MAAM;MAAExD;IAAU,CAAC,GAAG+B,WAAW,CAACyB,UAAU,CAAC;IAC7C,MAAM;MAAEzD,CAAC;MAAEuB;IAAU,CAAC,GAAGP,WAAW,CAAC,CAAC,EAAEf,SAAS,EAAE,IAAI,EAAEyC,SAAS,CAAC,CAAC,CAAC;;IAErE,MAAMgB,IAAI,GAAG;MACTC,MAAM,EAAE3D,CAAC;MACT4D,QAAQ,EAAE,CAAC;QACPC,KAAK,EAAE,gBAAgBJ,UAAU,EAAE;QACnCC,IAAI,EAAEnC,SAAS;QACfuC,WAAW,EAAE,OAAO;QAAE;QACtBC,WAAW,EAAE,CAAC;QAAE;QAChBC,QAAQ,EAAE,IAAI;QAAG;QACjBzD,IAAI,EAAE;MACV,CAAC;IACL,CAAC;IAED8B,YAAY,CAACqB,IAAI,CAAC;EACtB,CAAC;EAEDvE,SAAS,CAAC,MAAM;IACZkE,iBAAiB,CAAC,CAAC;EACvB,CAAC,EAAE,CAACX,SAAS,CAAC,CAAC,CAAC,CAAC;;EAEjB,oBACInD,OAAA;IAAK0E,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAChB3E,OAAA;MAAA2E,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtB/E,OAAA;MAAA2E,QAAA,gBACI3E,OAAA;QACIgF,IAAI,EAAC,MAAM;QACXxB,KAAK,EAAET,aAAc;QACrBkC,QAAQ,EAAE5B,qBAAsB;QAChC6B,WAAW,EAAC;MAAsB;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrC,CAAC,eACF/E,OAAA;QAAQmF,OAAO,EAAExB,cAAe;QAAAgB,QAAA,EAAC;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC1D/E,OAAA;QAAA4E,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACN/E,OAAA;QAAA2E,QAAA,GAAO,mBAEH,eAAA3E,OAAA;UAAQwD,KAAK,EAAEL,SAAU;UAAC8B,QAAQ,EAAExB,qBAAsB;UAAAkB,QAAA,gBACtD3E,OAAA;YAAQwD,KAAK,EAAE,CAAE;YAAAmB,QAAA,EAAC;UAAC;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAC5B/E,OAAA;YAAQwD,KAAK,EAAE,CAAE;YAAAmB,QAAA,EAAC;UAAC;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxB,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC,eACR/E,OAAA;QAAQmF,OAAO,EAAErB,iBAAkB;QAAAa,QAAA,EAAC;MAAY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxD,CAAC,eACN/E,OAAA;MAAK0E,SAAS,EAAC,iBAAiB;MAACU,KAAK,EAAE;QAAEC,MAAM,EAAE,OAAO;QAAEhF,KAAK,EAAE,KAAK;QAAEiF,MAAM,EAAE;MAAS,CAAE;MAAAX,QAAA,GAAC,GAAC,EACzF9B,SAAS,iBACN7C,OAAA;QAAK0E,SAAS,EAAC,OAAO;QAAAC,QAAA,eAClB3E,OAAA,CAACH,IAAI;UAACsE,IAAI,EAAEtB,SAAU;UAAC0C,OAAO,EAAE;YAC5BC,UAAU,EAAE,IAAI;YAChBC,mBAAmB,EAAE,KAAK;YAAE;YAC5BC,MAAM,EAAE;cACJxF,CAAC,EAAE;gBACCyF,KAAK,EAAE;kBACHC,OAAO,EAAE,IAAI;kBACbC,IAAI,EAAE;gBACV,CAAC;gBACDC,KAAK,EAAE;kBACHC,IAAI,EAAE;oBACFC,IAAI,EAAE,EAAE,CAAC;kBACb;gBACJ;cACJ,CAAC;cACDzE,CAAC,EAAE;gBACCoE,KAAK,EAAE;kBACHC,OAAO,EAAE,IAAI;kBACbC,IAAI,EAAE;gBACV,CAAC;gBACDI,WAAW,EAAE,IAAI;gBACjBH,KAAK,EAAE;kBACHC,IAAI,EAAE;oBACFC,IAAI,EAAE,EAAE,CAAC;kBACb;gBACJ;cACJ;YACJ;UACJ;QAAE;UAAApB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACJ,CACR;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAACnC,EAAA,CAhHQD,YAAY;AAAAuD,EAAA,GAAZvD,YAAY;AAkHrB,eAAeA,YAAY;AAAC,IAAAuD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}