{"ast":null,"code":"var _jsxFileName = \"/Users/matthewkalender/Desktop/HealthHack/ekg-simulator/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport Chart from \"chart.js/auto\";\nimport \"./App.css\";\n\n// Arrhythmias data structure\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst arrhythmias = {\n  \"Sinus Tachycardia\": {\n    heartRate: 100,\n    Pwave: true,\n    RtR: true,\n    // Regular R-R intervals\n    Placement: false,\n    // P wave before QRS complex\n    description: \"Regular rhythm with a P wave preceding every QRS complex.\"\n  },\n  \"Afib with RVR\": {\n    heartRate: 150,\n    Pwave: false,\n    Placement: false,\n    description: \"Lacks distinct P waves, has variable R-R intervals.\"\n  },\n  \"AVRT\": {\n    heartRate: 220,\n    Pwave: true,\n    Placement: true,\n    Ppositive: false,\n    // P wave is upside down\n    description: \"Very fast rate (200-300 bpm), with retrograde P waves.\"\n  },\n  \"AVNRT\": {\n    heartRate: 180,\n    Pwave: false,\n    RtR: false,\n    // Irregular R-R intervals\n    description: \"Fast rate, with retrograde P waves possibly overlaying the QRS.\"\n  }\n};\n\n// Merged function to generate EKG waveform and signal\nfunction generateEKG(duration = 5, arrhythmiaType, samplingRate = 1000, numWaves = 1) {\n  const numSamples = duration * samplingRate; // Total number of samples to generate\n  const t = Array.from({\n    length: numSamples\n  }, (_, i) => i / samplingRate); // Time array\n  let ekgSignal = Array(t.length).fill(0); // Initialize the EKG signal array\n  const heartRate = arrhythmias[arrhythmiaType].heartRate; // Get heart rate for the chosen arrhythmia\n  const beatDuration = 60 / heartRate; // Calculate the duration of one heartbeat\n\n  // Gaussian wave generator\n  function gaussianWave(x, mean, amplitude, width) {\n    return amplitude * Math.exp(-((x - mean) ** 2) / (2 * width ** 2));\n  }\n\n  // EKG waveform generation\n  for (let i = 0; i < numWaves; i++) {\n    let start = Math.floor(i * (60 / heartRate) * samplingRate);\n    let end = start + Math.floor(60 / heartRate * samplingRate);\n    let ekgBeat = Array(t.length).fill(0); // Initialize the EKG beat array\n\n    // Define wave positions\n    const pWaveStart = arrhythmias[arrhythmiaType].Pwave ? 0.2 * beatDuration : null; // P wave presence\n    const qWaveStart = 0.4 * beatDuration; // Q wave position\n    const rWaveStart = 0.45 * beatDuration; // R wave position\n    const sWaveStart = 0.5 * beatDuration; // S wave position\n    const tWaveStart = 0.7 * beatDuration; // T wave position\n\n    // Adjust for placement of P wave\n    const pWavePlacement = arrhythmias[arrhythmiaType].Placement;\n\n    // Add P wave based on its presence and placement\n    if (pWaveStart !== null) {\n      if (pWavePlacement) {\n        ekgBeat = ekgBeat.map((y, i) => y + gaussianWave(t[i], rWaveStart + 0.1 * beatDuration, 0.1, 0.05 * beatDuration));\n      } else {\n        ekgBeat = ekgBeat.map((y, i) => y + gaussianWave(t[i], pWaveStart, 0.1, 0.05 * beatDuration));\n      }\n    }\n\n    // Add QRS complex and T wave\n    ekgBeat = ekgBeat.map((y, i) => y - gaussianWave(t[i], qWaveStart, 0.15, 0.02 * beatDuration) +\n    // Q wave\n    gaussianWave(t[i], rWaveStart, 1.0, 0.01 * beatDuration) -\n    // R wave\n    gaussianWave(t[i], sWaveStart, 0.2, 0.02 * beatDuration) +\n    // S wave\n    gaussianWave(t[i], tWaveStart, 0.3, 0.1 * beatDuration) // T wave\n    );\n\n    // Adjust for inverted P wave in AVRT\n    if (arrhythmias[arrhythmiaType].Ppositive === false && arrhythmias[arrhythmiaType].Pwave) {\n      ekgBeat = ekgBeat.map((y, i) => y - gaussianWave(t[i], pWaveStart, 0.1, 0.05 * beatDuration) // Inverted P wave\n      );\n    }\n\n    // Add the EKG beat to the overall signal\n    for (let j = start; j < end && j < ekgSignal.length; j++) {\n      ekgSignal[j] += ekgBeat[j - start] + 0.05 * (Math.random() - 0.5); // Add noise\n    }\n  }\n\n  // Trim the time and ekgSignal arrays to contain only the relevant data\n  const trimmedEnd = Math.ceil(numWaves * (60 / heartRate) * samplingRate);\n  return {\n    t: t.slice(0, trimmedEnd),\n    ekgSignal: ekgSignal.slice(0, trimmedEnd)\n  };\n}\nfunction EKGSimulator() {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  const [userDiagnosis, setUserDiagnosis] = useState(\"\");\n  const [chosenEKGType, setChosenEKGType] = useState(\"\");\n  const [numPulses, setNumPulses] = useState(3); // Default to 3 pulses\n\n  const handleDiagnosisChange = event => {\n    setUserDiagnosis(event.target.value);\n  };\n  const handleNumPulsesChange = event => {\n    const value = parseInt(event.target.value);\n    if (value === 3 || value === 5) {\n      setNumPulses(value);\n    }\n  };\n  const checkDiagnosis = () => {\n    if (userDiagnosis.toLowerCase() === chosenEKGType.toLowerCase()) {\n      alert(\"Correct! Well done!\");\n    } else {\n      alert(`Incorrect. The correct answer was '${chosenEKGType}'.`);\n    }\n    // Show explanation\n    alert(arrhythmias[chosenEKGType].description);\n  };\n  const simulateRandomEKG = () => {\n    const arrhythmiaTypes = Object.keys(arrhythmias);\n    const randomType = arrhythmiaTypes[Math.floor(Math.random() * arrhythmiaTypes.length)];\n    setChosenEKGType(randomType);\n    const {\n      heartRate\n    } = arrhythmias[randomType];\n    const {\n      t,\n      ekgSignal\n    } = generateEKG(5, randomType, 1000, numPulses); // Generate based on arrhythmia type\n\n    const data = {\n      labels: t,\n      datasets: [{\n        label: `EKG Signal - ${randomType}`,\n        data: ekgSignal,\n        borderColor: \"black\",\n        // Change the line color to black\n        pointRadius: 0,\n        // Remove bullet points\n        showLine: true,\n        // Ensure line is shown\n        fill: false\n      }]\n    };\n    setChartData(data);\n  };\n  useEffect(() => {\n    simulateRandomEKG();\n  }, [numPulses]); // Re-run simulation when numPulses changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"EKG Simulator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userDiagnosis,\n        onChange: handleDiagnosisChange,\n        placeholder: \"Enter your diagnosis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: checkDiagnosis,\n        children: \"Check Diagnosis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: numPulses,\n        onChange: handleNumPulsesChange,\n        placeholder: \"Number of Pulses\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }, this), chartData && /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 9\n  }, this);\n}\n_s(EKGSimulator, \"jOaot8DIp93x66qbW7B5cqxaphk=\");\n_c = EKGSimulator;\nexport default EKGSimulator;\nvar _c;\n$RefreshReg$(_c, \"EKGSimulator\");","map":{"version":3,"names":["React","useState","useEffect","Line","Chart","jsxDEV","_jsxDEV","arrhythmias","heartRate","Pwave","RtR","Placement","description","Ppositive","generateEKG","duration","arrhythmiaType","samplingRate","numWaves","numSamples","t","Array","from","length","_","i","ekgSignal","fill","beatDuration","gaussianWave","x","mean","amplitude","width","Math","exp","start","floor","end","ekgBeat","pWaveStart","qWaveStart","rWaveStart","sWaveStart","tWaveStart","pWavePlacement","map","y","j","random","trimmedEnd","ceil","slice","EKGSimulator","_s","chartData","setChartData","userDiagnosis","setUserDiagnosis","chosenEKGType","setChosenEKGType","numPulses","setNumPulses","handleDiagnosisChange","event","target","value","handleNumPulsesChange","parseInt","checkDiagnosis","toLowerCase","alert","simulateRandomEKG","arrhythmiaTypes","Object","keys","randomType","data","labels","datasets","label","borderColor","pointRadius","showLine","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/matthewkalender/Desktop/HealthHack/ekg-simulator/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport Chart from \"chart.js/auto\";\nimport \"./App.css\";\n\n// Arrhythmias data structure\nconst arrhythmias = {\n    \"Sinus Tachycardia\": { \n        heartRate: 100,\n        Pwave: true,\n        RtR: true, // Regular R-R intervals\n        Placement: false, // P wave before QRS complex\n        description: \"Regular rhythm with a P wave preceding every QRS complex.\" \n    },\n    \"Afib with RVR\": { \n        heartRate: 150,\n        Pwave: false,\n        Placement: false, \n        description: \"Lacks distinct P waves, has variable R-R intervals.\" \n    },\n    \"AVRT\": { \n        heartRate: 220,\n        Pwave: true,\n        Placement: true,\n        Ppositive: false, // P wave is upside down\n        description: \"Very fast rate (200-300 bpm), with retrograde P waves.\" \n    },\n    \"AVNRT\": { \n        heartRate: 180,\n        Pwave: false,\n        RtR: false, // Irregular R-R intervals\n        description: \"Fast rate, with retrograde P waves possibly overlaying the QRS.\" \n    }\n};\n\n// Merged function to generate EKG waveform and signal\nfunction generateEKG(duration = 5, arrhythmiaType, samplingRate = 1000, numWaves = 1) {\n    const numSamples = duration * samplingRate; // Total number of samples to generate\n    const t = Array.from({ length: numSamples }, (_, i) => i / samplingRate); // Time array\n    let ekgSignal = Array(t.length).fill(0); // Initialize the EKG signal array\n    const heartRate = arrhythmias[arrhythmiaType].heartRate; // Get heart rate for the chosen arrhythmia\n    const beatDuration = 60 / heartRate; // Calculate the duration of one heartbeat\n\n    // Gaussian wave generator\n    function gaussianWave(x, mean, amplitude, width) {\n        return amplitude * Math.exp(-((x - mean) ** 2) / (2 * width ** 2));\n    }\n\n    // EKG waveform generation\n    for (let i = 0; i < numWaves; i++) {\n        let start = Math.floor(i * (60 / heartRate) * samplingRate);\n        let end = start + Math.floor((60 / heartRate) * samplingRate);\n        let ekgBeat = Array(t.length).fill(0); // Initialize the EKG beat array\n\n        // Define wave positions\n        const pWaveStart = arrhythmias[arrhythmiaType].Pwave ? 0.2 * beatDuration : null; // P wave presence\n        const qWaveStart = 0.4 * beatDuration; // Q wave position\n        const rWaveStart = 0.45 * beatDuration; // R wave position\n        const sWaveStart = 0.5 * beatDuration; // S wave position\n        const tWaveStart = 0.7 * beatDuration; // T wave position\n\n        // Adjust for placement of P wave\n        const pWavePlacement = arrhythmias[arrhythmiaType].Placement;\n\n        // Add P wave based on its presence and placement\n        if (pWaveStart !== null) {\n            if (pWavePlacement) {\n                ekgBeat = ekgBeat.map((y, i) => \n                    y + gaussianWave(t[i], rWaveStart + 0.1 * beatDuration, 0.1, 0.05 * beatDuration)\n                );\n            } else {\n                ekgBeat = ekgBeat.map((y, i) => \n                    y + gaussianWave(t[i], pWaveStart, 0.1, 0.05 * beatDuration)\n                );\n            }\n        }\n\n        // Add QRS complex and T wave\n        ekgBeat = ekgBeat.map((y, i) => \n            y -\n            gaussianWave(t[i], qWaveStart, 0.15, 0.02 * beatDuration) + // Q wave\n            gaussianWave(t[i], rWaveStart, 1.0, 0.01 * beatDuration) - // R wave\n            gaussianWave(t[i], sWaveStart, 0.2, 0.02 * beatDuration) + // S wave\n            gaussianWave(t[i], tWaveStart, 0.3, 0.1 * beatDuration) // T wave\n        );\n\n        // Adjust for inverted P wave in AVRT\n        if (arrhythmias[arrhythmiaType].Ppositive === false && arrhythmias[arrhythmiaType].Pwave) {\n            ekgBeat = ekgBeat.map((y, i) => \n                y - gaussianWave(t[i], pWaveStart, 0.1, 0.05 * beatDuration) // Inverted P wave\n            );\n        }\n\n        // Add the EKG beat to the overall signal\n        for (let j = start; j < end && j < ekgSignal.length; j++) {\n            ekgSignal[j] += ekgBeat[j - start] + 0.05 * (Math.random() - 0.5); // Add noise\n        }\n    }\n\n    // Trim the time and ekgSignal arrays to contain only the relevant data\n    const trimmedEnd = Math.ceil(numWaves * (60 / heartRate) * samplingRate);\n    return { t: t.slice(0, trimmedEnd), ekgSignal: ekgSignal.slice(0, trimmedEnd) };\n}\n\nfunction EKGSimulator() {\n    const [chartData, setChartData] = useState(null);\n    const [userDiagnosis, setUserDiagnosis] = useState(\"\");\n    const [chosenEKGType, setChosenEKGType] = useState(\"\");\n    const [numPulses, setNumPulses] = useState(3); // Default to 3 pulses\n\n    const handleDiagnosisChange = (event) => {\n        setUserDiagnosis(event.target.value);\n    };\n\n    const handleNumPulsesChange = (event) => {\n        const value = parseInt(event.target.value);\n        if (value === 3 || value === 5) {\n            setNumPulses(value);\n        }\n    };\n\n    const checkDiagnosis = () => {\n        if (userDiagnosis.toLowerCase() === chosenEKGType.toLowerCase()) {\n            alert(\"Correct! Well done!\");\n        } else {\n            alert(`Incorrect. The correct answer was '${chosenEKGType}'.`);\n        }\n        // Show explanation\n        alert(arrhythmias[chosenEKGType].description);\n    };\n\n    const simulateRandomEKG = () => {\n        const arrhythmiaTypes = Object.keys(arrhythmias);\n        const randomType = arrhythmiaTypes[Math.floor(Math.random() * arrhythmiaTypes.length)];\n        setChosenEKGType(randomType);\n\n        const { heartRate } = arrhythmias[randomType];\n        const { t, ekgSignal } = generateEKG(5, randomType, 1000, numPulses); // Generate based on arrhythmia type\n\n        const data = {\n            labels: t,\n            datasets: [{\n                label: `EKG Signal - ${randomType}`,\n                data: ekgSignal,\n                borderColor: \"black\", // Change the line color to black\n                pointRadius: 0, // Remove bullet points\n                showLine: true,  // Ensure line is shown\n                fill: false\n            }],\n        };\n\n        setChartData(data);\n    };\n\n    useEffect(() => {\n        simulateRandomEKG();\n    }, [numPulses]); // Re-run simulation when numPulses changes\n\n    return (\n        <div className=\"App\">\n            <h1>EKG Simulator</h1>\n            <div>\n                <input\n                    type=\"text\"\n                    value={userDiagnosis}\n                    onChange={handleDiagnosisChange}\n                    placeholder=\"Enter your diagnosis\"\n                />\n                <button onClick={checkDiagnosis}>Check Diagnosis</button>\n            </div>\n            <div>\n                <input\n                    type=\"number\"\n                    value={numPulses}\n                    onChange={handleNumPulsesChange}\n                    placeholder=\"Number of Pulses\"\n                />\n            </div>\n            {chartData && <Line data={chartData} />}\n        </div>\n    );\n}\n\nexport default EKGSimulator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}