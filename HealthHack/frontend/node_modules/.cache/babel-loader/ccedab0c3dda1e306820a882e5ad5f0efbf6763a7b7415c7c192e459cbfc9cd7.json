{"ast":null,"code":"var _jsxFileName = \"/Users/matthewkalender/Desktop/HealthHack/ekg-simulator/src/components/EKGSimulator.js\",\n  _s = $RefreshSig$();\n// src/components/EKGSimulator.js\nimport React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { generateEKG } from \"../utils/ekgUtils\";\nimport \"./EKGSimulator.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst arrhythmias = {\n  \"Sinus Tachycardia\": {\n    heartRate: 100,\n    pWave: true,\n    description: \"Regular rhythm with a P wave preceding every QRS complex, heart rate > 100 bpm.\"\n  },\n  \"Afib with RVR\": {\n    heartRate: 150,\n    pWave: false,\n    variableRR: true,\n    description: \"Irregular R-R intervals, absence of P waves, rapid ventricular rate.\"\n  },\n  \"Aflutter\": {\n    heartRate: 150,\n    flutterRatio: 2,\n    pWave: false,\n    description: \"Sawtooth pattern with consistent R-R interval, ventricular rate ~150 bpm.\"\n  },\n  \"AVRT\": {\n    heartRate: 220,\n    retrogradeP: true,\n    variableRR: true,\n    description: \"Fast ventricular rate, retrograde P waves, variability in R-R interval.\"\n  },\n  \"AVNRT\": {\n    heartRate: 180,\n    retrogradeP: true,\n    pWave: false,\n    description: \"Short PR interval, fast rate, overlapping P and QRS waves.\"\n  },\n  \"Multifocal Atrial Tachycardia\": {\n    heartRate: 100,\n    variableRR: true,\n    pWave: true,\n    description: \"Variable P-P, P-R, and R-R intervals, with distinct P wave morphologies.\"\n  }\n};\nfunction EKGSimulator() {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  const [userDiagnosis, setUserDiagnosis] = useState(\"\");\n  const [chosenEKGType, setChosenEKGType] = useState(\"\");\n  const handleDiagnosisChange = event => {\n    setUserDiagnosis(event.target.value);\n  };\n  const checkDiagnosis = () => {\n    if (userDiagnosis.toLowerCase() === chosenEKGType.toLowerCase()) {\n      alert(\"Correct! Well done!\");\n    } else {\n      alert(`Incorrect. The correct answer was '${chosenEKGType}'.`);\n    }\n  };\n  const simulateRandomEKG = () => {\n    const arrhythmiaTypes = Object.keys(arrhythmias);\n    const randomType = arrhythmiaTypes[Math.floor(Math.random() * arrhythmiaTypes.length)];\n    setChosenEKGType(randomType);\n    const {\n      heartRate,\n      ...params\n    } = arrhythmias[randomType];\n    const {\n      t,\n      ekgSignal\n    } = generateEKG(5, heartRate, 1000, params);\n    setChartData({\n      labels: t,\n      datasets: [{\n        label: \"EKG Signal\",\n        data: ekgSignal,\n        borderColor: \"blue\",\n        fill: false,\n        pointRadius: 0\n      }]\n    });\n  };\n  useEffect(() => {\n    simulateRandomEKG();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ekg-simulator\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"EKG Simulator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userDiagnosis,\n        onChange: handleDiagnosisChange,\n        placeholder: \"Enter your diagnosis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: checkDiagnosis,\n        children: \"Submit Diagnosis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: simulateRandomEKG,\n        children: \"Next EKG\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), chartData && /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n}\n_s(EKGSimulator, \"dmSDVEW4+hkaqoAW5IMqRlxxLP0=\");\n_c = EKGSimulator;\nexport default EKGSimulator;\nvar _c;\n$RefreshReg$(_c, \"EKGSimulator\");","map":{"version":3,"names":["React","useState","useEffect","Line","generateEKG","jsxDEV","_jsxDEV","arrhythmias","heartRate","pWave","description","variableRR","flutterRatio","retrogradeP","EKGSimulator","_s","chartData","setChartData","userDiagnosis","setUserDiagnosis","chosenEKGType","setChosenEKGType","handleDiagnosisChange","event","target","value","checkDiagnosis","toLowerCase","alert","simulateRandomEKG","arrhythmiaTypes","Object","keys","randomType","Math","floor","random","length","params","t","ekgSignal","labels","datasets","label","data","borderColor","fill","pointRadius","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/matthewkalender/Desktop/HealthHack/ekg-simulator/src/components/EKGSimulator.js"],"sourcesContent":["// src/components/EKGSimulator.js\nimport React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { generateEKG } from \"../utils/ekgUtils\";\nimport \"./EKGSimulator.css\";\n\nconst arrhythmias = {\n    \"Sinus Tachycardia\": { heartRate: 100, pWave: true, description: \"Regular rhythm with a P wave preceding every QRS complex, heart rate > 100 bpm.\" },\n    \"Afib with RVR\": { heartRate: 150, pWave: false, variableRR: true, description: \"Irregular R-R intervals, absence of P waves, rapid ventricular rate.\" },\n    \"Aflutter\": { heartRate: 150, flutterRatio: 2, pWave: false, description: \"Sawtooth pattern with consistent R-R interval, ventricular rate ~150 bpm.\" },\n    \"AVRT\": { heartRate: 220, retrogradeP: true, variableRR: true, description: \"Fast ventricular rate, retrograde P waves, variability in R-R interval.\" },\n    \"AVNRT\": { heartRate: 180, retrogradeP: true, pWave: false, description: \"Short PR interval, fast rate, overlapping P and QRS waves.\" },\n    \"Multifocal Atrial Tachycardia\": { heartRate: 100, variableRR: true, pWave: true, description: \"Variable P-P, P-R, and R-R intervals, with distinct P wave morphologies.\" }\n};\n\nfunction EKGSimulator() {\n    const [chartData, setChartData] = useState(null);\n    const [userDiagnosis, setUserDiagnosis] = useState(\"\");\n    const [chosenEKGType, setChosenEKGType] = useState(\"\");\n\n    const handleDiagnosisChange = (event) => {\n        setUserDiagnosis(event.target.value);\n    };\n\n    const checkDiagnosis = () => {\n        if (userDiagnosis.toLowerCase() === chosenEKGType.toLowerCase()) {\n            alert(\"Correct! Well done!\");\n        } else {\n            alert(`Incorrect. The correct answer was '${chosenEKGType}'.`);\n        }\n    };\n\n    const simulateRandomEKG = () => {\n        const arrhythmiaTypes = Object.keys(arrhythmias);\n        const randomType = arrhythmiaTypes[Math.floor(Math.random() * arrhythmiaTypes.length)];\n        setChosenEKGType(randomType);\n\n        const { heartRate, ...params } = arrhythmias[randomType];\n        const { t, ekgSignal } = generateEKG(5, heartRate, 1000, params);\n        setChartData({\n            labels: t,\n            datasets: [{\n                label: \"EKG Signal\",\n                data: ekgSignal,\n                borderColor: \"blue\",\n                fill: false,\n                pointRadius: 0\n            }]\n        });\n    };\n\n    useEffect(() => {\n        simulateRandomEKG();\n    }, []);\n\n    return (\n        <div className=\"ekg-simulator\">\n            <h1>EKG Simulator</h1>\n            <div className=\"controls\">\n                <input\n                    type=\"text\"\n                    value={userDiagnosis}\n                    onChange={handleDiagnosisChange}\n                    placeholder=\"Enter your diagnosis\"\n                />\n                <button onClick={checkDiagnosis}>Submit Diagnosis</button>\n                <button onClick={simulateRandomEKG}>Next EKG</button>\n            </div>\n            {chartData && <Line data={chartData} />}\n        </div>\n    );\n}\n\nexport default EKGSimulator;\n "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}