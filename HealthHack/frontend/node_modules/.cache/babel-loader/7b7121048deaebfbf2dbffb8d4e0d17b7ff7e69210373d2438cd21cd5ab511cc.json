{"ast":null,"code":"var _jsxFileName = \"/Users/matthewkalender/Desktop/HealthHack/ekg-simulator/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport Chart from \"chart.js/auto\";\nimport \"./App.css\"; // Ensure this file is created for styles\n\n/// Arrhythmias data structure\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst arrhythmias = {\n  \"Sinus Tachycardia\": {\n    heartRate: 100,\n    Pwave: true,\n    RtR: true,\n    // Regular R-R intervals\n    Placement: false,\n    // P wave before QRS complex\n    Ppositive: true,\n    // P wave is upside down\n    description: \"Regular rhythm with a P wave preceding every QRS complex.\"\n  },\n  \"Afib with RVR\": {\n    heartRate: 150,\n    Pwave: false,\n    RtR: false,\n    Placement: false,\n    description: \"Lacks distinct P waves, has variable R-R intervals.\"\n  },\n  \"AVRT\": {\n    heartRate: 220,\n    Pwave: true,\n    RtR: true,\n    Placement: true,\n    Ppositive: false,\n    // P wave is upside down\n    description: \"Very fast rate (200-300 bpm), with retrograde P waves.\"\n  },\n  \"AVNRT\": {\n    heartRate: 180,\n    Pwave: false,\n    RtR: true,\n    // Irregular R-R intervals\n    Placement: false,\n    description: \"Fast rate, with retrograde P waves possibly overlaying the QRS.\"\n  }\n};\n\n// Merged function to generate EKG waveform and signal\nfunction generateEKG(duration = 5, arrhythmiaType, samplingRate = 1000, numWaves = 1) {\n  const numSamples = duration * samplingRate; // Total number of samples to generate\n  const t = Array.from({\n    length: numSamples\n  }, (_, i) => i / samplingRate); // Time array\n  let ekgSignal = Array(t.length).fill(0); // Initialize the EKG signal array\n  const heartRate = arrhythmias[arrhythmiaType].heartRate; // Get heart rate for the chosen arrhythmia\n  const beatDuration = 60 / heartRate; // Calculate the duration of one heartbeat\n\n  // Gaussian wave generator\n  function gaussianWave(x, mean, amplitude, width) {\n    return amplitude * Math.exp(-((x - mean) ** 2) / (2 * width ** 2));\n  }\n\n  // EKG waveform generation\n  const wavePositions = []; // To hold positions for P, Q, R, S, T waves\n  for (let i = 0; i < numWaves; i++) {\n    let start = Math.floor(i * (60 / heartRate) * samplingRate);\n    let end = start + Math.floor(60 / heartRate * samplingRate);\n    let ekgBeat = Array(t.length).fill(0); // Initialize the EKG beat array\n\n    // Define wave positions\n    const pWaveStart = arrhythmias[arrhythmiaType].Pwave ? 0.2 * beatDuration : null; // P wave presence\n    const qWaveStart = 0.4 * beatDuration; // Q wave position\n    const rWaveStart = 0.45 * beatDuration; // R wave position\n    const sWaveStart = 0.5 * beatDuration; // S wave position\n    const tWaveStart = 0.7 * beatDuration; // T wave position\n\n    // Store the positions for highlighting\n    if (pWaveStart !== null) wavePositions.push({\n      type: 'P',\n      start: start + Math.floor(pWaveStart * samplingRate),\n      end: start + Math.floor((pWaveStart + 0.1 * beatDuration) * samplingRate)\n    });\n    wavePositions.push({\n      type: 'Q',\n      start: start + Math.floor(qWaveStart * samplingRate),\n      end: start + Math.floor((qWaveStart + 0.1 * beatDuration) * samplingRate)\n    });\n    wavePositions.push({\n      type: 'R',\n      start: start + Math.floor(rWaveStart * samplingRate),\n      end: start + Math.floor((rWaveStart + 0.1 * beatDuration) * samplingRate)\n    });\n    wavePositions.push({\n      type: 'S',\n      start: start + Math.floor(sWaveStart * samplingRate),\n      end: start + Math.floor((sWaveStart + 0.1 * beatDuration) * samplingRate)\n    });\n    wavePositions.push({\n      type: 'T',\n      start: start + Math.floor(tWaveStart * samplingRate),\n      end: start + Math.floor((tWaveStart + 0.2 * beatDuration) * samplingRate)\n    });\n\n    // Adjust for placement of P wave\n    const pWavePlacement = arrhythmias[arrhythmiaType].Placement;\n\n    // Add P wave based on its presence and placement\n    if (pWaveStart !== null) {\n      if (pWavePlacement) {\n        ekgBeat = ekgBeat.map((y, i) => y + gaussianWave(t[i], rWaveStart + 0.1 * beatDuration, 0.1, 0.05 * beatDuration));\n      } else {\n        ekgBeat = ekgBeat.map((y, i) => y + gaussianWave(t[i], pWaveStart, 0.1, 0.05 * beatDuration));\n      }\n    }\n\n    // Add QRS complex and T wave\n    ekgBeat = ekgBeat.map((y, i) => y - gaussianWave(t[i], qWaveStart, 0.15, 0.02 * beatDuration) +\n    // Q wave\n    gaussianWave(t[i], rWaveStart, 1.0, 0.01 * beatDuration) -\n    // R wave\n    gaussianWave(t[i], sWaveStart, 0.2, 0.02 * beatDuration) +\n    // S wave\n    gaussianWave(t[i], tWaveStart, 0.3, 0.1 * beatDuration) // T wave\n    );\n\n    // Adjust for inverted P wave in AVRT\n    if (arrhythmias[arrhythmiaType].Ppositive === false && arrhythmias[arrhythmiaType].Pwave) {\n      ekgBeat = ekgBeat.map((y, i) => y - gaussianWave(t[i], pWaveStart, 0.1, 0.05 * beatDuration) // Inverted P wave\n      );\n    }\n\n    // Add the EKG beat to the overall signal\n    for (let j = start; j < end && j < ekgSignal.length; j++) {\n      ekgSignal[j] += ekgBeat[j - start] + 0.05; // Add noise\n    }\n  }\n\n  // Trim the time and ekgSignal arrays to contain only the relevant data\n  const trimmedEnd = Math.ceil(numWaves * (60 / heartRate) * samplingRate);\n  return {\n    t: t.slice(0, trimmedEnd),\n    ekgSignal: ekgSignal.slice(0, trimmedEnd),\n    wavePositions\n  };\n}\nfunction EKGSimulator() {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  const [userDiagnosis, setUserDiagnosis] = useState(\"\");\n  const [chosenEKGType, setChosenEKGType] = useState(\"\");\n  const [numPulses, setNumPulses] = useState(3); // Default to 3 pulses\n  const [wavePositions, setWavePositions] = useState([]);\n  const handleDiagnosisChange = event => {\n    setUserDiagnosis(event.target.value);\n  };\n  const handleNumPulsesChange = event => {\n    const value = parseInt(event.target.value);\n    if (value === 3 || value === 5) {\n      setNumPulses(value);\n    }\n  };\n  const checkDiagnosis = () => {\n    if (userDiagnosis.toLowerCase() === chosenEKGType.toLowerCase()) {\n      alert(\"Correct! Well done!\");\n    } else {\n      alert(`Incorrect. The correct answer was '${chosenEKGType}'.`);\n      alert(arrhythmias[chosenEKGType].description);\n      // Update the chart to reflect the correct diagnosis\n      updateChartWithCorrectDiagnosis(chosenEKGType);\n    }\n  };\n  const updateChartWithCorrectDiagnosis = arrhythmiaType => {\n    const {\n      t,\n      ekgSignal,\n      wavePositions\n    } = generateEKG(5, arrhythmiaType, 1000, numPulses); // Generate based on correct arrhythmia type\n\n    const data = {\n      labels: t,\n      datasets: [{\n        label: `EKG Signal Below:`,\n        data: ekgSignal,\n        borderColor: \"black\",\n        // Change the line color to black\n        pointRadius: 0,\n        // Remove bullet points\n        showLine: true,\n        // Ensure line is shown\n        fill: false\n      }]\n    };\n\n    // Update the wavePositions to show correct waves\n    setWavePositions(wavePositions);\n    setChartData(data);\n  };\n  const generateRandomEKG = () => {\n    const arrhythmiaKeys = Object.keys(arrhythmias);\n    const randomIndex = Math.floor(Math.random() * arrhythmiaKeys.length);\n    const randomArrhythmia = arrhythmiaKeys[randomIndex];\n    setChosenEKGType(randomArrhythmia);\n    const {\n      t,\n      ekgSignal,\n      wavePositions\n    } = generateEKG(5, randomArrhythmia, 1000, numPulses); // Generate EKG\n    setWavePositions(wavePositions);\n    const data = {\n      labels: t,\n      datasets: [{\n        label: `EKG Signal Below:`,\n        data: ekgSignal,\n        borderColor: \"black\",\n        // Change the line color to black\n        pointRadius: 0,\n        // Remove bullet points\n        showLine: true,\n        // Ensure line is shown\n        fill: false\n      }]\n    };\n    setChartData(data);\n  };\n  useEffect(() => {\n    generateRandomEKG(); // Generate the first EKG on mount\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"EKG Simulator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"diagnosis\",\n        children: \"Your Diagnosis:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"diagnosis\",\n        value: userDiagnosis,\n        onChange: handleDiagnosisChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: checkDiagnosis,\n        children: \"Check Diagnosis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"numPulses\",\n        children: \"Number of Pulses (3 or 5):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"numPulses\",\n        value: numPulses,\n        onChange: handleNumPulsesChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: 3,\n          children: \"3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: 5,\n          children: \"5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 13\n    }, this), chartData && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Line, {\n        data: chartData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"wave-indicators\",\n        children: wavePositions.map((wave, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wave-indicator\",\n          children: [wave.type, \" wave\"]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 9\n  }, this);\n}\n_s(EKGSimulator, \"0GzMJJEvILwZxYog/p/WClOaxnY=\");\n_c = EKGSimulator;\nexport default EKGSimulator;\nvar _c;\n$RefreshReg$(_c, \"EKGSimulator\");","map":{"version":3,"names":["React","useState","useEffect","Line","Chart","jsxDEV","_jsxDEV","arrhythmias","heartRate","Pwave","RtR","Placement","Ppositive","description","generateEKG","duration","arrhythmiaType","samplingRate","numWaves","numSamples","t","Array","from","length","_","i","ekgSignal","fill","beatDuration","gaussianWave","x","mean","amplitude","width","Math","exp","wavePositions","start","floor","end","ekgBeat","pWaveStart","qWaveStart","rWaveStart","sWaveStart","tWaveStart","push","type","pWavePlacement","map","y","j","trimmedEnd","ceil","slice","EKGSimulator","_s","chartData","setChartData","userDiagnosis","setUserDiagnosis","chosenEKGType","setChosenEKGType","numPulses","setNumPulses","setWavePositions","handleDiagnosisChange","event","target","value","handleNumPulsesChange","parseInt","checkDiagnosis","toLowerCase","alert","updateChartWithCorrectDiagnosis","data","labels","datasets","label","borderColor","pointRadius","showLine","generateRandomEKG","arrhythmiaKeys","Object","keys","randomIndex","random","randomArrhythmia","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","onChange","onClick","className","wave","index","_c","$RefreshReg$"],"sources":["/Users/matthewkalender/Desktop/HealthHack/ekg-simulator/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport Chart from \"chart.js/auto\";\nimport \"./App.css\"; // Ensure this file is created for styles\n\n/// Arrhythmias data structure\nconst arrhythmias = {\n    \"Sinus Tachycardia\": { \n        heartRate: 100,\n        Pwave: true,\n        RtR: true, // Regular R-R intervals\n        Placement: false, // P wave before QRS complex\n        Ppositive: true, // P wave is upside down\n        description: \"Regular rhythm with a P wave preceding every QRS complex.\" \n    },\n    \"Afib with RVR\": { \n        heartRate: 150,\n        Pwave: false,\n        RtR: false,\n        Placement: false, \n        description: \"Lacks distinct P waves, has variable R-R intervals.\" \n    },\n    \"AVRT\": { \n        heartRate: 220,\n        Pwave: true,\n        RtR: true,\n        Placement: true,\n        Ppositive: false, // P wave is upside down\n        description: \"Very fast rate (200-300 bpm), with retrograde P waves.\" \n    },\n    \"AVNRT\": { \n        heartRate: 180,\n        Pwave: false,\n        RtR: true, // Irregular R-R intervals\n        Placement: false,\n        description: \"Fast rate, with retrograde P waves possibly overlaying the QRS.\" \n    }\n};\n\n// Merged function to generate EKG waveform and signal\nfunction generateEKG(duration = 5, arrhythmiaType, samplingRate = 1000, numWaves = 1) {\n    const numSamples = duration * samplingRate; // Total number of samples to generate\n    const t = Array.from({ length: numSamples }, (_, i) => i / samplingRate); // Time array\n    let ekgSignal = Array(t.length).fill(0); // Initialize the EKG signal array\n    const heartRate = arrhythmias[arrhythmiaType].heartRate; // Get heart rate for the chosen arrhythmia\n    const beatDuration = 60 / heartRate; // Calculate the duration of one heartbeat\n\n    // Gaussian wave generator\n    function gaussianWave(x, mean, amplitude, width) {\n        return amplitude * Math.exp(-((x - mean) ** 2) / (2 * width ** 2));\n    }\n\n    // EKG waveform generation\n    const wavePositions = []; // To hold positions for P, Q, R, S, T waves\n    for (let i = 0; i < numWaves; i++) {\n        let start = Math.floor(i * (60 / heartRate) * samplingRate);\n        let end = start + Math.floor((60 / heartRate) * samplingRate);\n        let ekgBeat = Array(t.length).fill(0); // Initialize the EKG beat array\n\n        // Define wave positions\n        const pWaveStart = arrhythmias[arrhythmiaType].Pwave ? 0.2 * beatDuration : null; // P wave presence\n        const qWaveStart = 0.4 * beatDuration; // Q wave position\n        const rWaveStart = 0.45 * beatDuration; // R wave position\n        const sWaveStart = 0.5 * beatDuration; // S wave position\n        const tWaveStart = 0.7 * beatDuration; // T wave position\n\n        // Store the positions for highlighting\n        if (pWaveStart !== null) wavePositions.push({ type: 'P', start: start + Math.floor(pWaveStart * samplingRate), end: start + Math.floor((pWaveStart + 0.1 * beatDuration) * samplingRate) });\n        wavePositions.push({ type: 'Q', start: start + Math.floor(qWaveStart * samplingRate), end: start + Math.floor((qWaveStart + 0.1 * beatDuration) * samplingRate) });\n        wavePositions.push({ type: 'R', start: start + Math.floor(rWaveStart * samplingRate), end: start + Math.floor((rWaveStart + 0.1 * beatDuration) * samplingRate) });\n        wavePositions.push({ type: 'S', start: start + Math.floor(sWaveStart * samplingRate), end: start + Math.floor((sWaveStart + 0.1 * beatDuration) * samplingRate) });\n        wavePositions.push({ type: 'T', start: start + Math.floor(tWaveStart * samplingRate), end: start + Math.floor((tWaveStart + 0.2 * beatDuration) * samplingRate) });\n\n        // Adjust for placement of P wave\n        const pWavePlacement = arrhythmias[arrhythmiaType].Placement;\n\n        // Add P wave based on its presence and placement\n        if (pWaveStart !== null) {\n            if (pWavePlacement) {\n                ekgBeat = ekgBeat.map((y, i) => \n                    y + gaussianWave(t[i], rWaveStart + 0.1 * beatDuration, 0.1, 0.05 * beatDuration)\n                );\n            } else {\n                ekgBeat = ekgBeat.map((y, i) => \n                    y + gaussianWave(t[i], pWaveStart, 0.1, 0.05 * beatDuration)\n                );\n            }\n        }\n\n        // Add QRS complex and T wave\n        ekgBeat = ekgBeat.map((y, i) => \n            y -\n            gaussianWave(t[i], qWaveStart, 0.15, 0.02 * beatDuration) + // Q wave\n            gaussianWave(t[i], rWaveStart, 1.0, 0.01 * beatDuration) - // R wave\n            gaussianWave(t[i], sWaveStart, 0.2, 0.02 * beatDuration) + // S wave\n            gaussianWave(t[i], tWaveStart, 0.3, 0.1 * beatDuration) // T wave\n        );\n\n        // Adjust for inverted P wave in AVRT\n        if (arrhythmias[arrhythmiaType].Ppositive === false && arrhythmias[arrhythmiaType].Pwave) {\n            ekgBeat = ekgBeat.map((y, i) => \n                y - gaussianWave(t[i], pWaveStart, 0.1, 0.05 * beatDuration) // Inverted P wave\n            );\n        }\n\n        // Add the EKG beat to the overall signal\n        for (let j = start; j < end && j < ekgSignal.length; j++) {\n            ekgSignal[j] += ekgBeat[j - start] + 0.05; // Add noise\n        }\n    }\n\n    // Trim the time and ekgSignal arrays to contain only the relevant data\n    const trimmedEnd = Math.ceil(numWaves * (60 / heartRate) * samplingRate);\n    return { t: t.slice(0, trimmedEnd), ekgSignal: ekgSignal.slice(0, trimmedEnd), wavePositions };\n}\n\nfunction EKGSimulator() {\n    const [chartData, setChartData] = useState(null);\n    const [userDiagnosis, setUserDiagnosis] = useState(\"\");\n    const [chosenEKGType, setChosenEKGType] = useState(\"\");\n    const [numPulses, setNumPulses] = useState(3); // Default to 3 pulses\n    const [wavePositions, setWavePositions] = useState([]);\n\n    const handleDiagnosisChange = (event) => {\n        setUserDiagnosis(event.target.value);\n    };\n\n    const handleNumPulsesChange = (event) => {\n        const value = parseInt(event.target.value);\n        if (value === 3 || value === 5) {\n            setNumPulses(value);\n        }\n    };\n\n    const checkDiagnosis = () => {\n        if (userDiagnosis.toLowerCase() === chosenEKGType.toLowerCase()) {\n            alert(\"Correct! Well done!\");\n        } else {\n            alert(`Incorrect. The correct answer was '${chosenEKGType}'.`);\n            alert(arrhythmias[chosenEKGType].description);\n            // Update the chart to reflect the correct diagnosis\n            updateChartWithCorrectDiagnosis(chosenEKGType);\n        }\n    };\n\n    const updateChartWithCorrectDiagnosis = (arrhythmiaType) => {\n        const { t, ekgSignal, wavePositions } = generateEKG(5, arrhythmiaType, 1000, numPulses); // Generate based on correct arrhythmia type\n\n        const data = {\n            labels: t,\n            datasets: [{\n                label: `EKG Signal Below:`,\n                data: ekgSignal,\n                borderColor: \"black\", // Change the line color to black\n                pointRadius: 0, // Remove bullet points\n                showLine: true,  // Ensure line is shown\n                fill: false,\n            }]\n        };\n\n        // Update the wavePositions to show correct waves\n        setWavePositions(wavePositions);\n        setChartData(data);\n    };\n\n    const generateRandomEKG = () => {\n        const arrhythmiaKeys = Object.keys(arrhythmias);\n        const randomIndex = Math.floor(Math.random() * arrhythmiaKeys.length);\n        const randomArrhythmia = arrhythmiaKeys[randomIndex];\n        setChosenEKGType(randomArrhythmia);\n\n        const { t, ekgSignal, wavePositions } = generateEKG(5, randomArrhythmia, 1000, numPulses); // Generate EKG\n        setWavePositions(wavePositions);\n\n        const data = {\n            labels: t,\n            datasets: [{\n                label: `EKG Signal Below:`,\n                data: ekgSignal,\n                borderColor: \"black\", // Change the line color to black\n                pointRadius: 0, // Remove bullet points\n                showLine: true,  // Ensure line is shown\n                fill: false,\n            }]\n        };\n\n        setChartData(data);\n    };\n\n    useEffect(() => {\n        generateRandomEKG(); // Generate the first EKG on mount\n    }, []);\n\n    return (\n        <div>\n            <h1>EKG Simulator</h1>\n            <div>\n                <label htmlFor=\"diagnosis\">Your Diagnosis:</label>\n                <input type=\"text\" id=\"diagnosis\" value={userDiagnosis} onChange={handleDiagnosisChange} />\n                <button onClick={checkDiagnosis}>Check Diagnosis</button>\n            </div>\n            <div>\n                <label htmlFor=\"numPulses\">Number of Pulses (3 or 5):</label>\n                <select id=\"numPulses\" value={numPulses} onChange={handleNumPulsesChange}>\n                    <option value={3}>3</option>\n                    <option value={5}>5</option>\n                </select>\n            </div>\n            {chartData && (\n                <div>\n                    <Line data={chartData} />\n                    <div className=\"wave-indicators\">\n                        {wavePositions.map((wave, index) => (\n                            <div key={index} className=\"wave-indicator\">\n                                {wave.type} wave\n                            </div>\n                        ))}\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default EKGSimulator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}