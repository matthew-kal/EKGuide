{"ast":null,"code":"var _jsxFileName = \"/Users/matthewkalender/Desktop/HealthHack/ekg-simulator/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { generateEKG } from \"./utils/ekgUtils\";\nimport { random } from \"lodash\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst arrhythmias = {\n  \"Sinus Tachycardia\": {\n    heartRate: 100,\n    pWave: true,\n    constantRR: true,\n    description: \"Sinus tachycardia with anterograde P wave preceding every QRS. Regular R-R intervals.\"\n  },\n  \"Afib with RVR\": {\n    heartRate: 150,\n    pWave: false,\n    constantRR: false,\n    description: \"Atrial fibrillation with rapid ventricular response. No P waves and variable R-R intervals.\"\n  },\n  \"AVRT\": {\n    heartRate: 220,\n    retrogradeP: true,\n    constantRR: false,\n    description: \"AVRT with a high rate (200-300 bpm), inverted P waves, and slight R wave variability.\"\n  },\n  \"AVNRT\": {\n    heartRate: 180,\n    retrogradeP: true,\n    pWave: false,\n    constantRR: true,\n    description: \"AVNRT with a fast rate, retrograde P waves possibly overlaying the QRS.\"\n  }\n};\nfunction App() {\n  _s();\n  const [diagnosis, setDiagnosis] = useState(\"\");\n  const [chosenArrhythmia, setChosenArrhythmia] = useState(null);\n  const [chartData, setChartData] = useState(null);\n  const simulateRandomEKG = () => {\n    const keys = Object.keys(arrhythmias);\n    const chosenKey = keys[random(keys.length - 1)];\n    const params = arrhythmias[chosenKey];\n    setChosenArrhythmia(chosenKey);\n    const {\n      t,\n      ekgSignal,\n      peakTimesAll\n    } = generateEKG(5, params.heartRate, 1000, params);\n    setChartData({\n      labels: t,\n      datasets: [{\n        label: \"Simulated EKG\",\n        data: ekgSignal,\n        fill: false,\n        borderColor: 'black',\n        pointRadius: 0\n      }]\n    });\n  };\n  const handleDiagnosis = () => {\n    if (diagnosis.toLowerCase() === chosenArrhythmia.toLowerCase()) {\n      alert(\"Correct! Well done!\");\n    } else {\n      alert(`Incorrect. The correct answer was '${chosenArrhythmia}'`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"EKG Simulator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: simulateRandomEKG,\n      children: \"Simulate Random EKG\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), chartData && /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 27\n    }, this), chosenArrhythmia && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Enter your diagnosis:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: diagnosis,\n        onChange: e => setDiagnosis(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDiagnosis,\n        children: \"Submit Diagnosis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"Pfyc+Pd2O+Fu59qpvl14ZMmj2/U=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Line","generateEKG","random","jsxDEV","_jsxDEV","Fragment","_Fragment","arrhythmias","heartRate","pWave","constantRR","description","retrogradeP","App","_s","diagnosis","setDiagnosis","chosenArrhythmia","setChosenArrhythmia","chartData","setChartData","simulateRandomEKG","keys","Object","chosenKey","length","params","t","ekgSignal","peakTimesAll","labels","datasets","label","data","fill","borderColor","pointRadius","handleDiagnosis","toLowerCase","alert","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","value","onChange","e","target","_c","$RefreshReg$"],"sources":["/Users/matthewkalender/Desktop/HealthHack/ekg-simulator/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { generateEKG } from \"./utils/ekgUtils\";\nimport { random } from \"lodash\";\n\nconst arrhythmias = {\n    \"Sinus Tachycardia\": {\n        heartRate: 100,\n        pWave: true,\n        constantRR: true,\n        description: \"Sinus tachycardia with anterograde P wave preceding every QRS. Regular R-R intervals.\"\n    },\n    \"Afib with RVR\": {\n        heartRate: 150,\n        pWave: false,\n        constantRR: false,\n        description: \"Atrial fibrillation with rapid ventricular response. No P waves and variable R-R intervals.\"\n    },\n    \"AVRT\": {\n        heartRate: 220,\n        retrogradeP: true,\n        constantRR: false,\n        description: \"AVRT with a high rate (200-300 bpm), inverted P waves, and slight R wave variability.\"\n    },\n    \"AVNRT\": {\n        heartRate: 180,\n        retrogradeP: true,\n        pWave: false,\n        constantRR: true,\n        description: \"AVNRT with a fast rate, retrograde P waves possibly overlaying the QRS.\"\n    }\n};\n\nfunction App() {\n    const [diagnosis, setDiagnosis] = useState(\"\");\n    const [chosenArrhythmia, setChosenArrhythmia] = useState(null);\n    const [chartData, setChartData] = useState(null);\n\n    const simulateRandomEKG = () => {\n        const keys = Object.keys(arrhythmias);\n        const chosenKey = keys[random(keys.length - 1)];\n        const params = arrhythmias[chosenKey];\n        setChosenArrhythmia(chosenKey);\n\n        const { t, ekgSignal, peakTimesAll } = generateEKG(5, params.heartRate, 1000, params);\n        \n        setChartData({\n            labels: t,\n            datasets: [{\n                label: \"Simulated EKG\",\n                data: ekgSignal,\n                fill: false,\n                borderColor: 'black',\n                pointRadius: 0\n            }]\n        });\n    };\n\n    const handleDiagnosis = () => {\n        if (diagnosis.toLowerCase() === chosenArrhythmia.toLowerCase()) {\n            alert(\"Correct! Well done!\");\n        } else {\n            alert(`Incorrect. The correct answer was '${chosenArrhythmia}'`);\n        }\n    };\n\n    return (\n        <div style={{ padding: \"20px\" }}>\n            <h1>EKG Simulator</h1>\n            <button onClick={simulateRandomEKG}>Simulate Random EKG</button>\n            {chartData && <Line data={chartData} />}\n            \n            {chosenArrhythmia && (\n                <>\n                    <h2>Enter your diagnosis:</h2>\n                    <input \n                        type=\"text\" \n                        value={diagnosis} \n                        onChange={(e) => setDiagnosis(e.target.value)} \n                    />\n                    <button onClick={handleDiagnosis}>Submit Diagnosis</button>\n                </>\n            )}\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}